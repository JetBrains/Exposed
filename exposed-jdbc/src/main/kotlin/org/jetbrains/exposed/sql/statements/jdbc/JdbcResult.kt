package org.jetbrains.exposed.sql.statements.jdbc

import org.jetbrains.exposed.sql.statements.api.ResultApi
import java.sql.ResultSet

/**
 * Class for wrapping a [java.sql.ResultSet] generated by executing a statement that queries a JDBC database.
 *
 * @property result The actual [ResultSet] returned by the database after statement execution.
 */
class JdbcResult(
    val result: ResultSet
) : ResultApi {
    override fun toString(): String = "JdbcResult(resultSet = $result)"

    override fun getObject(index: Int): Any? = result.getObject(index)

    override fun <T> getObject(index: Int, type: Class<T>): T? = result.getObject(index, type)

    override fun getObject(name: String): Any? = result.getObject(name)

    override fun <T> getObject(name: String, type: Class<T>): T? = result.getObject(name, type)

    override fun next(): Boolean = result.next()

    override fun close() {
        result.close()
    }

    override fun releaseResult() {
        val statement = result.statement
        close()
        statement?.close()
    }
}

package org.jetbrains.exposed.sql.statements

import org.jetbrains.exposed.exceptions.ExposedSQLException
import org.jetbrains.exposed.sql.InternalApi
import org.jetbrains.exposed.sql.JdbcTransaction
import org.jetbrains.exposed.sql.statements.api.JdbcPreparedStatementApi
import org.jetbrains.exposed.sql.statements.api.PreparedStatementApi
import java.sql.SQLException

internal object DefaultValueMarker {
    override fun toString(): String = "DEFAULT"
}

interface Executable<out T, S : Statement<T>> {
    val statement: S

    /**
     * Determines the exact way that an SQL statement is executed in a [transaction] and applies any necessary
     * logic before returning the result generated by the executed statement.
     */
    fun JdbcPreparedStatementApi.executeInternal(transaction: JdbcTransaction): T?

    /**
     * Uses a [transaction] connection and an [sql] string representation to return a precompiled SQL statement,
     * stored as an implementation of [PreparedStatementApi].
     */
    fun prepared(
        transaction: JdbcTransaction,
        sql: String
    ): JdbcPreparedStatementApi = transaction.connection.prepareStatement(sql, false)

    /** Whether the SQL statement is meant to be performed as part of a batch execution. */
    val isAlwaysBatch: Boolean
        get() = false

    /**
     * Executes the SQL statement directly in the provided [transaction] and returns the generated result,
     * or `null` if either no result was retrieved or if the transaction blocked statement execution.
     */
    fun execute(transaction: JdbcTransaction): T? {
        return if (transaction.blockStatementExecution) {
            transaction.explainStatement = statement
            null
        } else {
            transaction.exec(this)
        }
    }
}

@OptIn(InternalApi::class)
internal fun <T, S : Statement<T>> Executable<T, S>.executeIn(
    transaction: JdbcTransaction
): Pair<T?, List<StatementContext>> {
    val arguments = statement.arguments()
    val contexts = if (arguments.any()) {
        arguments.map { args ->
            val context = StatementContext(statement, args)
            JdbcTransaction.globalInterceptors.forEach { it.beforeExecution(transaction, context) }
            transaction.interceptors.forEach { it.beforeExecution(transaction, context) }
            context
        }
    } else {
        val context = StatementContext(statement, emptyList())
        JdbcTransaction.globalInterceptors.forEach { it.beforeExecution(transaction, context) }
        transaction.interceptors.forEach { it.beforeExecution(transaction, context) }
        listOf(context)
    }

    val statement = try {
        prepared(transaction, statement.prepareSQL(transaction)).apply {
            timeout = transaction.queryTimeout
        }
    } catch (e: SQLException) {
        throw ExposedSQLException(e, contexts, transaction)
    }
    contexts.forEachIndexed { _, context ->
        statement.fillParameters(context.args)
        // REVIEW
        if (contexts.size > 1 || isAlwaysBatch) statement.addBatch()
    }
    if (!transaction.db.supportsMultipleResultSets) {
        transaction.closeExecutedStatements()
    }

    transaction.currentStatement = statement
    transaction.interceptors.forEach { it.afterStatementPrepared(transaction, statement) }
    val result = try {
        statement.executeInternal(transaction)
    } catch (cause: SQLException) {
        throw ExposedSQLException(cause, contexts, transaction)
    }
    transaction.currentStatement = null
    transaction.executedStatements.add(statement)

    JdbcTransaction.globalInterceptors.forEach { it.afterExecution(transaction, contexts, statement) }
    transaction.interceptors.forEach { it.afterExecution(transaction, contexts, statement) }
    return result to contexts
}

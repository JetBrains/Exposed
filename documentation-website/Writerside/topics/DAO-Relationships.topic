<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Relationships" id="DAO-Relationships">
    <show-structure for="chapter" depth="2" />
    <tldr>
        <p><b>Code example</b>:
            <a href="https://github.com/JetBrains/Exposed/tree/main/documentation-website/Writerside/snippets/exposed-dao-relationships/">
                exposed-dao-relationships
            </a>
        </p>
    </tldr>

    <p>
        Relationships define how entities are associated with one another in your database schema and provide
        mechanisms to query and manipulate these associations. There are four ways entities could reference one another:
    </p>
    <list>
        <li><a anchor="many-to-one-reference">Many-to-one reference</a></li>
        <li><a anchor="optional-reference">Optional reference</a></li>
        <li><a anchor="many-to-many-reference">Many-to-many reference</a></li>
        <li><a anchor="parent-child-reference">Parent-child reference</a></li>
    </list>
    <chapter title="Many-to-one reference" id="many-to-one-reference">
        <p>
            A many-to-one reference is a relationship between two database tables where multiple rows in one table
            (the "child" table) can reference a single row in another table (the "parent" table).
        </p>
        <p>
            Consider the following <code>UsersTable</code> and its corresponding entity:
        </p>
        <tabs>
            <tab id="users-table" title="UsersTable">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/tables/UsersTable.kt"
                            include-symbol="UsersTable"
                />
            </tab>
            <tab id="user-entity" title="UserEntity">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/entities/UserEntity.kt"
                            include-lines="16-19,21"
                />
            </tab>
        </tabs>
        <p>
            Assume you want to add another table, <code>UserRatingsTable</code>, to store user ratings for a particular
            film. Each rating is associated with a user, but a user can be associated with many ratings. This is a
            many-to-one relationship.
        </p>
        <p>
            You can implement this relationship by using a reference column in the child table
            (<code>UserRatingsTable</code>) that links to the parent table (<code>UsersTable</code>). To create a
            reference column, use the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-table/reference.html">
                <code>reference()</code>
            </a>
            function:
        </p>
        <tabs>
            <tab id="user-ratings-table" title="UserRatingsTable">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/tables/UserRatingsTable.kt"
                            include-symbol="UserRatingsTable"
                />
            </tab>
            <tab id="user-ratings-entity" title="UserRatingEntity">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/entities/UserRatingEntity.kt"
                            include-symbol="UserRatingEntity"
                />
            </tab>
        </tabs>

        <chapter title="Accessing data" id="accessing-data">
            <p>
                You can retrieve the film for a <code>UserRatingEntity</code> object in the same way
                you would get any other field:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dao-relationships/src/main/kotlin/org/example/examples/OneToManyExamples.kt"
                        include-symbol="film"
            />
        </chapter>
        <chapter title="Reverse access" id="reverse-access">
            <p>
                If you wanted to get all the ratings for a film, you could do that by using the <code>.find()</code>
                function of the entity class. However, it is much easier to add a
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/referrers-on.html">
                    <code>referrersOn</code>
                </a>
                field to the class representing the film, <code>StarWarsFilmEntity</code>:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dao-relationships/src/main/kotlin/org/example/entities/StarWarsFilmEntity.kt"
                        include-lines="19-25,27"
            />
            <p>
                You can then access this field on an entity object:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dao-relationships/src/main/kotlin/org/example/examples/OneToManyExamples.kt"
                        include-symbol="filmRatings"
            />
        </chapter>
        <chapter title="Back reference" id="back-reference">
            <p>
                If each user rates only one film, you can define a
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/back-referenced-on.html">
                    <code>backReferencedOn</code>
                </a>
                field to the entity class to access the <code>UserRatingsTable</code> data:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dao-relationships/src/main/kotlin/org/example/entities/UserEntity.kt"
                        include-symbol="UserWithSingleRatingEntity"
            />
            <p>You can then access this field on a <code>UserWithSingleRatingEntity</code> object:</p>
            <code-block lang="kotlin">
                user1.rating // returns a UserRating object
            </code-block>
        </chapter>
    </chapter>
    <chapter title="Optional reference" id="optional-reference">
        <p>In Exposed, you can also add an optional reference.</p>
        <p>
            For example, if you want to include anonymous user ratings to your table, you can do so by setting
            the reference field as optional using
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-table/opt-reference.html">
                <code>optReference()</code>
            </a>
            in your table and
            <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/optional-referenced-on.html">
                <code>optionalReferencedOn</code>
            </a>
            in your entity definition:
        </p>
        <tabs>
            <tab id="user-ratings-table-with-optional-reference" title="UserRatingsWithOptionalUserTable">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/tables/UserRatingsTable.kt"
                            include-symbol="UserRatingsWithOptionalUserTable"
                />
            </tab>
            <tab id="user-ratings-entity-with-optional-reference" title="UserRatingWithOptionalUserEntity">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/entities/UserRatingEntity.kt"
                            include-symbol="UserRatingWithOptionalUserEntity"
                />
            </tab>
        </tabs>
    </chapter>
    <chapter title="Ordered reference" id="ordered-reference">
        <p>
            You can define the order in which referenced entities appear using <code>orderBy</code>:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/UserEntity.kt"
                    include-symbol="UserEntity"
        />
        <p>
            In a more complex scenario, you can specify multiple columns along with the corresponding sort order
            for each:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/UserEntity.kt"
                    include-lines="23-27,37-41"
        />
        <p>Without using the <a href="https://kotlinlang.org/docs/functions.html#infix-notation">infix notation</a>,
            the <code>orderBy</code> method is chained after <code>referrersOn</code>:</p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/UserEntity.kt"
                    include-lines="23-27,32-35,41"
        />
    </chapter>
    <chapter title="Many-to-many reference" id="many-to-many-reference">
        <p>
            A many-to-many reference is a relationship between two database tables where multiple records in one table
            are related to multiple records in another table. This type of relationship is modeled by using an
            intermediate table to link the two tables.
        </p>
        <p>
            Consider the following table, <code>ActorsTable</code>, and it's corresponding entity:
        </p>
        <tabs>
            <tab id="actors-table" title="ActorsTable">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/tables/ActorsTable.kt"
                            include-symbol="ActorsTable"
                />
            </tab>
            <tab id="actor-entity" title="ActorEntity">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/entities/ActorEntity.kt"
                            include-symbol="ActorEntity"
                />
            </tab>
        </tabs>

        <p>
            Suppose you now want to extend this table to include a reference of to the <code>StarWarsFilmEntity</code>
            class. To achieve this, you can create an additional intermediate table to store the references:
        </p>

        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/tables/ActorsTable.kt"
                    include-symbol="StarWarsFilmActorsTable"
        />
        <p>
            Add a reference to the <code>ActorEntity</code> in the <code>StarWarsFilmEntity</code> using the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity/via.html">
                <code>via</code>
            </a>
            function:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/StarWarsFilmEntity.kt"
                    include-lines="26"
        />
        <p>The final <code>StarWarsFilmEntity</code> will look in the following way:</p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/StarWarsFilmEntity.kt"
                    include-symbol="StarWarsFilmEntity"
        />
    </chapter>
    <chapter title="Parent-Child reference" id="parent-child-reference">

        <p>
            A parent-child reference is very similar to a many-to-many relationship, but an intermediate table contains
            both references to the same table.
        </p>
        <p>
            A parent-child relationship can represent hierarchical data, such as a series of films and their directors.
            For example, you may want to track how directors oversee multiple Star Wars films, including sequels or
            spin-offs. For this, you would create a self-referencing intermediate table to define the relationships
            between a parent film (original) and its child films (sequels or spin-offs):
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/tables/StarWarsFilmsTable.kt"
                    include-symbol="StarWarsFilmRelationsTable"
        />
        <p>
            In this example, <code>parentFilm</code> represents the original film, whereas <code>childFilm</code>
            represents a sequel, prequel, or spin-off. As you can see <code>StarWarsFilmRelationsTable</code> columns
            target only <code>StarWarsFilmsWithDirectorTable</code>.
        </p>
        <p>
            You then need to update the entity class to include relationships for parent and child films using the
            <code>via</code> function:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/StarWarsFilmEntity.kt"
                    include-symbol="StarWarsFilmWithParentAndChildEntity"
        />
        <p>
            Here’s how you can create and query the parent-child hierarchy for <code>StarWarsFilmsTable</code>:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/examples/ParentChildExamples.kt"
                    include-lines="16-40"
        />
    </chapter>
    <chapter title="Composite primary key reference" id="composite-primary-key-reference">
        <p>
            In some database schemas, a composite primary key is used to uniquely identify rows by combining
            multiple columns. Here's how you can reference composite ID tables.
        </p>
        <p>
            Assume that you have the following <code>CompositeIdTable</code> and its relevant entity:
        </p>
        <tabs>
            <tab id="directors-table" title="DirectorsCompositeIdTable">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/tables/DirectorsTable.kt"
                            include-symbol="DirectorsCompositeIdTable"
                />
            </tab>
            <tab id="director-entity" title="DirectorCompositeIDEntity">
                <code-block lang="kotlin"
                            src="exposed-dao-relationships/src/main/kotlin/org/example/entities/DirectorEntity.kt"
                            include-lines="26-29,31"
                />
            </tab>
        </tabs>
        <p>
            We can refactor the <code>StarWarsFilmsTable</code> table to reference this table by adding columns to hold the
            appropriate primary key values and creating a table-level foreign key constraint:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/tables/StarWarsFilmsTable.kt"
                    include-symbol="StarWarsFilmsWithCompositeRefTable"
        />
        <p>
            Then, add the field to the entity using the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/referenced-on.html">
                <code>referencedOn</code>
            </a>
            function:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/StarWarsFilmEntity.kt"
                    include-symbol="StarWarsFilmWithCompositeRefEntity"
        />
        <tip>
            For more information on creating table foreign key constraints, see the
            <a href="Working-with-Tables.topic#foreign-key">
                Foreign Key constraint
            </a>
            section.
        </tip>
        <p>
            Now you can get the director for a <code>StarWarsFilm</code> object, <code>movie</code>,
            in the same way you would get any other field:
        </p>
        <code-block lang="kotlin">
            movie.director // returns a Director object
        </code-block>
        <p>
            If you wanted to get all the films made by a director, you could add a <code>referrersOn</code>
            field to the <code>DirectorCompositeIDEntity</code> class:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/entities/DirectorEntity.kt"
                    include-symbol="DirectorCompositeIDEntity"
        />

        <p>
            You can then access this field on a <code>DirectorCompositeIDEntity</code> object, <code>director</code>:
        </p>

        <code-block lang="kotlin">
            director.films // returns all StarWarsFilm objects that reference this director
        </code-block>
        <p>Using other previously mentioned <a href="https://kotlinlang.org/docs/functions.html#infix-notation">infix functions</a>,
            like <code>optionalReferencedOn</code>, <code>backReferencedOn</code>, and <code>optionalReferrersOn</code>, is also supported for referencing or
            referenced <code>CompositeEntity</code> objects,
            by using the respective overloads that accept an <code>IdTable</code> as an argument.
            These overloads will automatically resolve the foreign key constraint associated with the composite primary key.</p>
    </chapter>
    <chapter title="Eager Loading" id="eager-loading">
        <p>
            References in Exposed are lazily loaded, meaning queries to fetch the data for the reference are made at
            the moment the reference is first utilised. In cases where you know you will require references
            ahead of time, Exposed can eager load them at the time of the parent query. This is
            preventing the classic &quot;N+1&quot; problem as references can be aggregated and loaded in a single query.
        </p>
        <p>
            To eager load a reference, use the <code>.load()</code> function and pass the DAO's reference as
            a <code>KProperty</code>:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/examples/EagerLoadingExamples.kt"
                    include-lines="11"
        />
        <p>
            This works for references of references. For example, if <code>UserRatingTable</code> had a <code>film</code>
            reference you could do the following:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao-relationships/src/main/kotlin/org/example/examples/EagerLoadingExamples.kt"
                    include-lines="14"
        />
        <note>
            References that are eagerly loaded are stored inside the transaction cache.
            This means that they are not available in other transactions
            and thus, must be loaded and referenced inside the same transaction.
            Enabling <code>keepLoadedReferencesOutOfTransaction</code> in <code>DatabaseConfig</code>
            will allow getting referenced values outside the transaction block.
        </note>
        <chapter title="Loading collections" id="eager-loading-collections">
            <p>
                To eagerly load references on <code>Collections</code> of DAO's such as <code>List</code>
                and <code>SizedIterable</code>, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/with.html">
                    <code>.with()</code>
                </a>
                function and pass each reference as <code>KProperty</code>:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dao-relationships/src/main/kotlin/org/example/examples/EagerLoadingExamples.kt"
                        include-lines="17"
            />
            <p>
                <code>.with()</code> eagerly loads references for all <code>Entity</code> instances in the
                <code>SizedIterable</code> returned by <code>.all()</code> and returns this collection.
            </p>
            <note>
                <code>SizedIterable</code> requires a transaction to execute any of its methods, so the loaded
                collection cannot be directly used outside a <code>transaction</code> block unless it is first
                converted to a standard collection, such as by calling <code>.toList()</code>.
            </note>
        </chapter>
        <chapter title="Loading text fields" id="eager-loading-text-fields">
            <p>
                Some database drivers do not load text content immediately due to performance and memory reasons.
                This means that you can obtain the column value only within the open transaction.
            </p>
            <p>
                To make content available outside the transaction, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-text-column-type/eager-loading.html">
                    <code>eagerLoading</code>
                </a>
                parameter in your field definition:
            </p>
            <code-block lang="kotlin">
                object StarWarsFilmsTable : Table() {
                    //...
                    val description = text("name", eagerLoading=true)
                }
            </code-block>
        </chapter>
    </chapter>
</topic>

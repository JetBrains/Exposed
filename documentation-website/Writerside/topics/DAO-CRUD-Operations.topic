<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="CRUD operations" id="DAO-CRUD-Operations">
    <show-structure for="chapter,procedure" depth="2"/>

    <p>
        CRUD (Create, Read, Update, Delete) are the four basic operations supported by any database. This section
        demonstrates how to perform SQL CRUD operations using Exposed's DAO (Data Access Object) API.
    </p>
    <p>
        These operations can be performed directly through the methods and properties of the
        <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/index.html">
            <code>EntityClass</code>
        </a>
        associated with the table. For more information, see <a href="DAO-Entity-definition.topic"/>.
    </p>
    <chapter title="Create" id="create">
        <p>
            To create a new table row, use the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/new.html">
                <code>.new()</code>
            </a>
            function on the entity class:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/examples/CreateExamples.kt"
                    include-symbol="movie"/>
        <p>
            In the above example <code>StarWarsFilmEntity</code> would be the
            <a href="DAO-Entity-definition.topic">
                entity instance
            </a>
            linked to the <code>StarWarsFilmsTable</code> table.
        </p>
        <p>
            To provide a manual <code>id</code> value to a new entity, pass the value as an argument to the
            <code>id</code> parameter:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/examples/CreateExamples.kt"
                    include-symbol="movie2"/>
        <p>
            If the entity is a <code>CompositeEntity</code>, the ID value can be constructed by creating a component
            column-to-value association using the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-composite-i-d/index.html">
                <code>CompositeID</code>
            </a>
            class:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/examples/CreateExamples.kt"
                    include-symbol="directorId, director"/>
        <p>
            If <code>CompositeID</code> contains autoincrement or autogenerated columns, values for such columns are
            not required to be provided in <code>CompositeID</code> building block. In this case they will be normally
            generated by database.
        </p>
    </chapter>
    <chapter title="Read" id="read">
        <p>
            To read a value from a property, simply access it as you would with any property in a Kotlin class:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                    include-symbol="movieName"/>
        <note>
            An entity's <code>id</code> property is wrapped as an instance of the <code>EntityID</code> class.
            To access the actual wrapped value, for example the stored <code>Int</code> from a <code>StarWarsFilm</code>
            entity, use <code>EntityID.value</code>:
            <code-block lang="kotlin"
                        src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                        include-symbol="movieId"/>
        </note>
        <p>To retrieve entities, use one of the following methods:</p>
            <chapter title="Retrieve all" id="read-all">
                To get all the entity instances associated with this entity class, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/all.html">
                    <code>.all()</code>
                </a>
                function:
                <code-block lang="kotlin"
                            src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                            include-symbol="allMovies"/>
            </chapter>
            <chapter title="Find by condition" id="find-all">
                To get all the entity instances that conform to the conditional expression, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/find.html">
                    <code>.find()</code>
                </a>
                function:
                <code-block lang="kotlin"
                            src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                            include-symbol="specificMovie"/>
            </chapter>
            <chapter title="Find by ID" id="find-by-id">
                To get an entity by its ID value, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/find-by-id.html">
                    <code>.findById()</code>
                </a>
                function:
                <code-block lang="kotlin"
                            src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                            include-symbol="movie"/>
            </chapter>
        <p>
            If the entity is a <code>CompositeEntity</code>, its <code>id</code> property can be used to refer to
            all composite columns and to get entities,
            much like the <code>id</code> column of its associated <code>CompositeIdTable</code>:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                    include-symbol="directorId, director, directors"/>
        <p>
            The SQL query would result in something like the following:
        </p>
        <code-block lang="sql"
                    src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                    include-lines="73-76"/>
        <tip>
            For a list of available predicates, see
            <a href="DSL-Querying-data.topic" anchor="where-expression">DSL Where expression</a>.
        </tip>
        <chapter title="Read an entity with a join to another table" id="read-entity-with-a-join-to-another-table">
            <p>Suppose that you want to find all users who rated the second Star Wars film with a score greater than 5.
                First, you would write that query using Exposed DSL.</p>

            <code-block lang="kotlin"
                        src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                        include-symbol="query"/>
            <p>
                Once the query is defined, you can wrap the result in the <code>User</code> entity using the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/wrap-rows.html">
                    <code>.wrapRows()</code>
                </a>
                function to generate entities from the retrieved data:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                        include-symbol="users"/>
        </chapter>
        <chapter title="Sort results" id="sort-by">
            <p>
                The <code>.all()</code> function returns a <code>SizedIterable</code> that stores all entity instances
                associated with the invoking entity class. <code>SizedIterable</code> implements the Kotlin
                <code>Iterable</code> interface, which allows calling any sorting methods from the
                <a href="https://kotlinlang.org/api/core/kotlin-stdlib/">
                    Kotlin standard library
                </a>
                .
            </p>
            <chapter title="Ascending order" id="sortedBy">
                <p>
                    To sort results in ascending order, use the
                    <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/sorted-by.html">
                        <code>.sortedBy()</code>
                    </a>
                    function:
                </p>
                <code-block lang="kotlin"
                            src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                            include-symbol="moviesByAscOrder"/>
            </chapter>
            <chapter title="Descending order" id="sortedByDescending">
                <p>
                    To sort results in descending order, use the
                    <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/sorted-by-descending.html">
                        <code>.sortedByDescending()</code>
                    </a>
                    function:
                </p>
                <code-block lang="kotlin"
                            src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                            include-symbol="moviesByDescOrder"/>
            </chapter>
        </chapter>
    </chapter>
    <chapter title="Update" id="update">
        <p>
            You can update the value of a property just as you would with any property in a Kotlin class:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/examples/UpdateExamples.kt"
                    include-lines="16"/>
        <note>
            Exposed doesn't make an immediate update when you set a new value for <code>Entity</code>, it just stores it on the inner map.
            "Flushing" values to the database occurs at the end of the transaction, or before the next <code>SELECT *</code> from the database.
        </note>
        <chapter title="Update by ID" id="findByIdAndUpdate">
            <p>
                To search for an entity by its ID and apply an update, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/find-by-id-and-update.html">
                    <code>.findByIdAndUpdate()</code>
                </a>
                function:
            </p>
            <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/examples/UpdateExamples.kt" include-symbol="updatedMovie"/>
        </chapter>
        <chapter title="Update using a query" id="findSingleByAndUpdate">
            <p>
                To search for a single entity by a query and apply an update, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/find-single-by-and-update.html">
                    <code>.findSingleByAndUpdate()</code>
                </a>
                function:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dao/src/main/kotlin/org/example/examples/UpdateExamples.kt"
                        include-symbol="updatedMovie2"/>
        </chapter>

    </chapter>
    <chapter title="Delete" id="delete">
        <p>
            To delete a record, use the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity/delete.html">
                <code>.delete()</code>
            </a>
            function:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/examples/DeleteExamples.kt"
                    include-lines="16"/>
    </chapter>

    <chapter title="Use queries as expressions" id="use-queries-as-expressions">
        <p>
            Suppose that you want to sort cities by the number of users in each city. To achieve this, you can write a
            subquery which counts the users in each city and
            then order the result by that count. To do so, however, you need to convert the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-query/index.html">
                <code>Query</code>
            </a>
            to an
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-expression/index.html">
                <code>Expression</code>
            </a>
            .
        </p>
        <p>
            This can be done using the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/wrap-as-expression.html">
                <code>wrapAsExpression()</code>
            </a>
            function:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                    include-symbol="expression, cities"/>
    </chapter>

    <chapter title="Add computed fields to entity class" id="add-computed-fields-to-entity-class">
        <p>
            Suppose that you want to use a window function to rank films with each entity fetch. The companion object of
            the entity class can override any open
            function in <code>EntityClass</code>. However, to achieve this functionality, you only need to override the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/search-query.html">
                <code>searchQuery()</code>
            </a>
            function. The results of the function can then be accessed through a property of the entity class:</p>
        <tabs>
            <tab id="entity-class" title="StarWarsFilmWithRankEntity">
                <code-block lang="kotlin"
                            src="exposed-dao/src/main/kotlin/org/example/entities/StarWarsFilmWithRankEntity.kt"/>
            </tab>
            <tab id="table-definition" title="StarWarsFilmsWithRankTable">
                <code-block lang="kotlin"
                            src="exposed-dao/src/main/kotlin/org/example/tables/StarWarsFilmsWithRankTable.kt"/>
            </tab>
        </tabs>
        <p>
            Then, creating and fetching entities would look like this:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/examples/ReadExamples.kt"
                    include-symbol="readComputedField"/>
    </chapter>

    <chapter title="Auto-fill columns on entity change" id="auto-fill-columns-on-entity-change">
        <p>
            Suppose that you need all your table objects to have at minimum two columns for storing the date and time when
            a record is created and modified. You could define a <code>BaseTable</code> to automatically handle registering
            these columns to any table that extends this abstract class. An abstract <code>BaseEntity</code> could also be
            defined to automatically associate fields to the relevant columns:</p>
        <tabs>
            <tab id="abstract-base-table" title="BaseTable">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/tables/BaseTable.kt"/>
            </tab>
            <tab id="abstract-base-entity" title="BaseEntity">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/entities/BaseEntity.kt"/>
            </tab>
        </tabs>
        <p>
            Whenever a new entity is instantiated, the <code>created</code> column will be filled with the database
            default defined by
            <a href="https://jetbrains.github.io/Exposed/api/exposed-kotlin-datetime/org.jetbrains.exposed.sql.kotlin.datetime/-current-date-time/index.html">
                <code>CurrentDateTime</code>
            </a>
            , while the <code>modified</code> column will be filled with a null value.
        </p>
        <p>
            An entity lifecycle interceptor,
            <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-hook/index.html">
                <code>EntityHook</code>
            </a>
            , can then be subscribed to in order to automatically populate the <code>modified</code> field whenever an
            existing entity is later updated:</p>
        <code-block lang="kotlin"
                    src="exposed-dao/src/main/kotlin/org/example/entities/BaseEntityClass.kt"/>
        <p>
            The example above invokes <code>EntityHook.subscribe()</code> in an abstract <code>BaseEntityClass</code> that
            can be used as a companion object for any <code>BaseEntity</code> implementation, but the interceptor could be
            subscribed to (and unsubscribed from) on the transaction level as well.</p>
        <p>The subscription only performs an action when a record is updated (detected by <code>EntityChangeType.Updated</code>).
        </p>
        <tip>
            Other actions could be detected for when an entity is created (<code>EntityChangeType.Created</code>) or
            removed (<code>EntityChangeType.Removed</code>).
        </tip>
        <p>
            When an update occurs, the <code>modified</code> column is populated with the current UTC time
            using the <code>nowUTC()</code> method. However, the update only happens if the <code>modified</code> field
            has not already been set. This is checked by using <code>Entity.writeValues</code>, which holds the column-value
            mappings for an entity instance before being flushed to the database. Performing this check ensures that filling
            the <code>modified</code> column does not trigger the interceptor itself.
        </p>
        <p>
            Additionally, every change (creation, update, or deletion) is logged using the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/exposed-logger.html">
                <code>exposedLogger</code>
            </a>
            .
        </p>
        <tip>
            For more details about using statement interceptors, see
            <a href="Transactions.md" anchor="statement-interceptors">DSL Statement Interceptors</a>.
        </tip>
    </chapter>

</topic>

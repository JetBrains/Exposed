<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="CRUD Operations" id="DAO-CRUD-Operations">
    <show-structure for="chapter,procedure" depth="2"/>

    <p>
        CRUD (Create, Read, Update, Delete) are the four basic operations supported by any database. This section
        demonstrates how to perform SQL CRUD operations using Exposed's DAO (Data Access Object) API.
    </p>
    <p>
        These operations can be performed directly through the methods and properties of the <code>Entity</code> class
        associated with the table. For more information, see <a href="DAO-Table-Types.topic" anchor="define-entity-instance"/>.
    </p>
    <chapter title="Create" id="create">
        <p>
            To create a new table row, use the <code>new</code> function on the entity class:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="26-30"/>
        <p>
            In the above example <code>StarWarsFilm</code> would be the <a href="DAO-Table-Types.topic" anchor="define-entity-instance">entity instance</a> linked to
            the <code>StarWarsFilms</code> table.
        </p>
        <p>
            To provide a manual <code>id</code> value to a new entity, pass the value as an argument to the <code>id</code> parameter:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="33-37"/>
        <p>
            If the entity is a <code>CompositeEntity</code>, the id value can be constructed by creating a component column-to-value association using
            <code>CompositeID</code>:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="89-96"/>
    </chapter>
    <chapter title="Read" id="read">
        <p>To read a value from a property, simply access it as you would with any property in a Kotlin class:</p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="40"/>
        <note>
            An entity's <code>id</code> property is wrapped as an instance of the <code>EntityID</code> class.
            To access the actual wrapped value, for example the stored <code>Int</code> from a <code>StarWarsFilm</code>
            entity, use <code>EntityID.value</code>:
            <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="44"/>
        </note>
        <p>To retrieve entities, use one of the following methods:</p>
            <chapter title="all" id="read-all">
                To get all the entity instances associated with this entity class, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/all.html"><code>all()</code></a>
                function:
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="48"/>
            </chapter>
            <chapter title="find" id="find-all">
                To get all the entity instances that conform to the conditional expression, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/find.html"><code>find()</code></a>
                function:
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="60"/>
            </chapter>
            <chapter title="findById" id="find-by-id">
                To get an entity by its id value, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-dao/org.jetbrains.exposed.dao/-entity-class/find-by-id.html"><code>findById()</code></a>
                function:
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="64"/>
            </chapter>
        <p>
            If the entity is a <code>CompositeEntity</code>, its <code>id</code> property can be used to refer to
            all composite columns and to get entities,
            much like the <code>id</code> column of its associated <code>CompositeIdTable</code>:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="90-94,106"/>
        <p>
            The SQL query would result in something like the following:
        </p>
        <code-block lang="sql" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="101-104" />
        <tip>
            For a list of available predicates, see
            <a href="DSL-Querying-data.topic" anchor="where-expression">DSL Where expression</a>.
        </tip>
        <chapter title="Read an entity with a join to another table" id="read-entity-with-a-join-to-another-table">
            <p>Suppose that you want to find all users who rated the second Star Wars film with a score greater than 5.
                First, you would write that query using Exposed DSL.</p>

            <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="115-120"/>
            <p>
                Once the query is defined, you can wrap the result in the <code>User</code> entity using the
                <code>wrapRows()</code> function to generate entities from the retrieved data:</p>
            <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="121"/>
        </chapter>
        <chapter title="Sort results" id="sort-by">
            <p>

            </p>
            <chapter title="sortedBy" id="sortedBy">
                <p>To sort results in ascending order, use <code>sortedBy</code>:</p>
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="52"/>
            </chapter>
            <chapter title="sortedByDescending" id="sortedByDescending">
                <p>To sort results in descending order, use <code>sortedByDescending</code>:</p>
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="56"/>
            </chapter>
        </chapter>
    </chapter>
    <chapter title="Update" id="update">
        <p>
            You can update the value of a property just as you would with any property in a Kotlin class:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="68"/>
        <note>
            Exposed doesn't make an immediate update when you set a new value for <code>Entity</code>, it just stores it on the inner map.
            "Flushing" values to the database occurs at the end of the transaction, or before the next <code>SELECT *</code> from the database.
        </note>
        <chapter title="findByIdAndUpdate" id="findByIdAndUpdate">
            <p>
                To search for an entity by its id and apply an update, use the <code>findByIdAndUpdate()</code> function:
            </p>
            <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="71-73"/>
        </chapter>
        <chapter title="findSingleByAndUpdate" id="findSingleByAndUpdate">
            <p>
                To search for a single entity by a query and apply an update, use the <code>findSingleByAndUpdate()</code>
                function:
            </p>
            <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="77-79"/>
        </chapter>

    </chapter>
    <chapter title="Delete" id="delete">
        <p>
            To delete a record, use the <code>delete()</code> function:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="83"/>
    </chapter>

    <chapter title="Use queries as expressions" id="use-queries-as-expressions">
        <p>Suppose that you want to sort cities by the number of users in each city. To achieve this, you can write a
            subquery which counts the users in each city and
            then order the result by that count.To do so, however, you need to convert the <code>Query</code> to an
            <code>Expression</code>. This can be done using the <code>wrapAsExpression()</code>
            function:</p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/App.kt" include-lines="129-135"/>
    </chapter>

    <chapter title="Add computed fields to entity class" id="add-computed-fields-to-entity-class">
        <p>Suppose that you want to use a window function to rank films with each entity fetch. The companion object of
            the entity class can override any open
            function in <code>EntityClass</code>. However, to achieve this functionality, you only need to override
            <code>searchQuery()</code>. The results of the function can then be accessed through a property of the entity class:</p>

        <code-block lang="kotlin"><![CDATA[
            object StarWarsFilms : IntIdTable() {
                val sequelId = integer("sequel_id").uniqueIndex()
                val name = varchar("name", 50)
                val rating = double("rating")

                val rank = Rank().over().orderBy(rating, SortOrder.DESC)
            }

            class StarWarsFilm(id: EntityID<Int>) : IntEntity(id) {
                var sequelId by StarWarsFilms.sequelId
                var name by StarWarsFilms.name
                var rating by StarWarsFilms.rating

                val rank: Long
                    get() = readValues[StarWarsFilms.rank]

                companion object : IntEntityClass<StarWarsFilm>(StarWarsFilms) {
                    override fun searchQuery(op: Op<Boolean>): Query {
                        return super.searchQuery(op).adjustSelect {
                            select(columns + StarWarsFilms.rank).set
                        }
                    }
                }
            }

            transaction {
                StarWarsFilm.new {
                    sequelId = 8
                    name = "The Last Jedi"
                    rating = 4.2
                }
                // more insertions ...
                entityCache.clear()

                // fetch entities with value (or store entities then read value)
                StarWarsFilm.find { StarWarsFilms.name like "The%" }.map { it.name to it.rank }
            }
        ]]></code-block>
    </chapter>

    <chapter title="Auto-fill created and updated columns on entity change" id="auto-fill-created-and-updated-columns-on-entity-change">
        <p>See example by @PaulMuriithi <a href="https://github.com/PaulMuriithi/ExposedDatesAutoFill/blob/master/src/main/kotlin/app/Models.kt">here</a>.</p>
    </chapter>

</topic>

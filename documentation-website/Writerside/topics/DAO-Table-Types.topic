<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Table types" id="DAO-Table-Types" help-id="DAO-Table-types">

    <include from="DSL-Table-Types.topic" element-id="dsl-core-table-class"/>
    <chapter title="Auto-incrementing ID column tables" id="defining-tables">
        <snippet id="dao-table-types">
            <p>
                Apart from the core <code>Table</code> class, Exposed provides the base
                <code>IdTable</code> class and its subclasses through the DAO API.
            </p>
            <p>
                The <code>IdTable</code> class extends <code>Table</code> and is
                designed to simplify the definition of tables that use a standard <code>id</code> column as the primary key.
                These tables can be declared without explicitly including the <code>id</code> column, as IDs of the
                appropriate type are automatically generated when creating new table rows.
            </p>
            <p>
                <code>IdTable</code> and its subclasses are located in the
                <control>org.jetbrains.exposed.dao.id</control>
                package of the
                <control>exposed-core</control>
                module.
            </p>
        </snippet>
        <deflist type="medium">
            <def id="IntIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-int-id-table/index.html"><code>IntIdTable</code></a></title>
                <code>Int</code> id column</def>
            <def id="LongIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-long-id-table/index.html"><code>LongIdTable</code></a></title>
                <code>Long</code> id column
            </def>
            <def id="UIntIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-u-int-id-table/index.html"><code>UIntIdTable</code></a></title>
                <code>UInt</code> id column
            </def>
            <def id="ULongIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-u-long-id-table/index.html"><code>ULongIdTable</code></a></title>
                <code>ULong</code> id column
            </def>
            <def id="UUIDTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-u-u-i-d-table/index.html"><code>UUIDTable</code></a></title>
                <code>UUID</code> id column
            </def>
        </deflist>
        <p>The following example represents a table with custom columns <code>sequel_id</code>, <code>name</code>,
            and <code>director</code>:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/StarWarsFilms.kt" include-lines="3-6,14-18" id="define-table-example"/>
        <p>
            <snippet id="IntIdTable-id-generation-note">
                The <code>IntIdTable</code> class automatically generates an auto-incrementing integer <code>id</code>
                column, which serves as the primary key for the table.
            </snippet>
            When the table is created, it corresponds to the following
            SQL query:
        </p>
        <code-block lang="sql" src="exposed-dao/src/main/kotlin/org/example/StarWarsFilms.kt" include-lines="8-12" />
        <p>
            For more information on defining and configuring tables in Exposed, see <a href="Working-with-Tables.topic"/>.
        </p>
    </chapter>
    <chapter title="Defining entity instances" id="define-entity-instance">
        <p>
            Representing database tables as Kotlin objects ensures type safety and allows you to work with database
            records just like regular Kotlin objects, taking full advantage of Kotlin's language features.
        </p>
        <p>
            Any <code>IdTable</code> needs to be associated with an <code>Entity</code>, because every database record
            in this table needs to be mapped to an <code>Entity</code> instance, identified by its primary key.
        </p>
        <p>
            An entity instance is defined as a class.
            For example, given the <a anchor="define-table-example">above table definition of <code>StarWarsFilms</code></a>,
            the corresponding entity class can be defined as follows:
        </p>
        <code-block lang="kotlin"><![CDATA[
        class StarWarsFilm(id: EntityID<Int>) : IntEntity(id) {
            companion object : IntEntityClass<StarWarsFilm>(StarWarsFilms)

            var sequelId by StarWarsFilms.sequelId
            var name by StarWarsFilms.name
            var director by StarWarsFilms.director
        }
    ]]></code-block>
        <list>
            <li>
                Since the <code>StarWarsFilms</code> table is an <code>IntIdTable</code>, the <code>StarWarsFilm</code> class extends from <code>IntEntity</code>,
                which indicates that the <code>id</code> and primary key of the <code>StarWarsFilm</code> table is of type <code>Int</code>.
            </li>
            <li>
                The <code>companion object</code> block defines an <code>EntityClass</code> which is responsible for maintaining
                the relation between the <code>StarWarsFilm</code> class and the actual table object, <code>StarWarsFilms</code>.
            </li>
            <li>
                Each column in the table is represented as a property in the class, where the <code>by</code> keyword
                ensures the data is fetched or updated from the corresponding column when accessed.
            </li>
        </list>
         <p>
            Once the entity class is defined, instances of this class allow you to manipulate individual records
             from the corresponding table. This could involve
             <a href="DAO-CRUD-Operations.topic" anchor="create">creating a new record</a>,
             <a href="DAO-CRUD-Operations.topic" anchor="read">retrieving a row based on its primary key</a>,
             <a href="DAO-CRUD-Operations.topic" anchor="update">updating values</a>, or
             <a href="DAO-CRUD-Operations.topic" anchor="delete">deleting records</a>.
         </p>
    </chapter>

    <chapter title="Composite id table" id="composite-id-table">
        <p>To define multiple columns as part of the primary key and id, use <code>CompositeIdTable</code> and mark each composite column using
            <code>entityId()</code>.
            Each component column will be available for CRUD operations either individually (as for any standard column) or all together as part of the
            <code>id</code> column:</p>

        <code-block lang="kotlin"><![CDATA[
            object Directors : CompositeIdTable("directors") {
                val name = varchar("name", 50).entityId()
                val guildId = uuid("guild_id").autoGenerate().entityId()
                val genre = enumeration<Genre>("genre")

                override val primaryKey = PrimaryKey(name, guildId)
            }

            class Director(id: EntityID<CompositeID>) : CompositeEntity(id) {
                companion object : CompositeEntityClass<Director>(Directors)

                var genre by Directors.genre
            }
        ]]></code-block>
        <include from="Working-with-Tables.topic" element-id="add-id-column-tip"/>

        <code-block lang="kotlin"><![CDATA[
            object Guilds : UUIDTable("guilds")

            object Directors : CompositeIdTable("directors") {
                val name = varchar("name", 50).entityId()
                val guildId = reference("guild_id", Guilds)
                val genre = enumeration<Genre>("genre")

                init {
                    addIdColumn(guildId)
                }

                override val primaryKey = PrimaryKey(name, guildId)
            }
        ]]></code-block>
    </chapter>

    <chapter title="Custom column type table" id="custom-column-type">
        <p>To define a custom column type as the primary key and id, use a typed <code>IdTable</code> directly and override the <code>id</code> column:</p>

        <code-block lang="kotlin"><![CDATA[
            object Directors : IdTable<String>("directors") {
                override val id: Column<EntityID<String>> = varchar("id", 32).entityId()
                val name = varchar("name", 50)

                override val primaryKey = PrimaryKey(id)
            }

            class Director(id: EntityID<String>) : Entity<String>(id) {
                companion object : EntityClass<String, Director>(Directors)

                var name by Directors.name
            }
        ]]></code-block>
    </chapter>
    <seealso style="cards">
        <category ref="related">
            <a href="Working-with-Tables.topic"/>
            <a href="Data-Types.topic"/>
        </category>
    </seealso>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Table types" id="DAO-Table-Types" help-id="DAO-Table-types">

    <include from="DSL-Table-Types.topic" element-id="dsl-core-table-class"/>
    <chapter id="defining-tables">
        <title>Auto-incrementing <code>id</code> column tables</title>
        <snippet id="dao-table-types">
            <p>
                Apart from the core <code>Table</code> class, Exposed provides the base
                <code>IdTable</code> class and its subclasses through the DAO API.
            </p>
            <p>
                The <code>IdTable</code> class extends <code>Table</code> and is
                designed to simplify the definition of tables that use a standard <code>id</code> column as the primary key.
                These tables can be declared without explicitly including the <code>id</code> column, as IDs of the
                appropriate type are automatically generated when creating new table rows.
            </p>
            <p>
                <code>IdTable</code> and its subclasses are located in the
                <control>org.jetbrains.exposed.dao.id</control>
                package of the
                <control>exposed-core</control>
                module.
            </p>
        </snippet>
        <deflist type="medium">
            <def id="IntIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-int-id-table/index.html"><code>IntIdTable</code></a></title>
                <code>Int</code> id column</def>
            <def id="LongIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-long-id-table/index.html"><code>LongIdTable</code></a></title>
                <code>Long</code> id column
            </def>
            <def id="UIntIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-u-int-id-table/index.html"><code>UIntIdTable</code></a></title>
                <code>UInt</code> id column
            </def>
            <def id="ULongIdTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-u-long-id-table/index.html"><code>ULongIdTable</code></a></title>
                <code>ULong</code> id column
            </def>
            <def id="UUIDTable">
                <title><a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-u-u-i-d-table/index.html"><code>UUIDTable</code></a></title>
                <code>UUID</code> id column
            </def>
        </deflist>
        <p>The following example represents a table with custom columns <code>sequel_id</code>, <code>name</code>,
            and <code>director</code>:
        </p>
        <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/tables/StarWarsFilmsTable.kt"
                    include-lines="3-6,19-23" id="StarWarsFilmsTable-dao-code-block"/>
        <p>
            <snippet id="IntIdTable-id-generation-note">
                The <code>IntIdTable</code> class automatically generates an auto-incrementing integer <code>id</code>
                column, which serves as the primary key for the table.
            </snippet>
            When the table is created, it corresponds to the following
            SQL query:
        </p>
        <code-block lang="sql"
                    src="exposed-dao/src/main/kotlin/org/example/tables/StarWarsFilmsTable.kt"
                    include-lines="12-16"
                    id="StarWarsFilmsTable-dao-sql"/>
        <p>
            For more information on defining and configuring tables in Exposed, see <a href="Working-with-Tables.topic"/>.
        </p>
    </chapter>

    <chapter title="Composite id table" id="composite-id-table">
        <p>
            To define multiple columns as part of the primary key and id, use
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.dao.id/-composite-id-table/index.html"><code>CompositeIdTable</code></a>
            and mark each composite column using <code>entityId()</code>.
            Each component column will be available for CRUD operations either individually (as for any standard column)
            or all together as part of the <code>id</code> column:
        </p>
        <tabs>
            <tab id="DirectorsTable-definition" title="DirectorsTable">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/tables/DirectorsTable.kt"/>
            </tab>
            <tab id="DirectorEntity-definition" title="DirectorEntity">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/entities/DirectorEntity.kt"/>
            </tab>
        </tabs>

        <include from="Working-with-Tables.topic" element-id="add-id-column-tip"/>

        <tabs>
            <tab id="DirectorsWithGuildRefTable-definition" title="DirectorsWithGuildRefTable">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/tables/DirectorsWithGuildRefTable.kt"/>
            </tab>
            <tab id="GuildsTable-definition" title="GuildsTable">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/tables/GuildsTable.kt"/>
            </tab>
        </tabs>
    </chapter>

    <chapter title="Custom column type table" id="custom-column-type">
        <p>
            To define a custom column type as the primary key and id, use a typed <code>IdTable</code> directly and
            override the <code>id</code> column, as shown in the following example:
        </p>
        <tabs>
            <tab id="DirectorsCustomTable-definition" title="DirectorsCustomTable">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/tables/DirectorsCustomTable.kt"/>
            </tab>
            <tab id="DirectorCustomEntity-definition" title="DirectorCustomEntity">
                <code-block lang="kotlin" src="exposed-dao/src/main/kotlin/org/example/entities/DirectorCustomEntity.kt"/>
            </tab>
        </tabs>
        <p>
            In the definition of <code>DirectorsCustomTable</code>, the <code>id</code> field is of type <code>Column&lt;EntityID&lt;String&gt;&gt;</code>,
            which will hold <code>String</code> values with a length of up to 32 characters. Using the
            <code>override</code> keyword indicates that this <code>id</code> column is overriding the default
            <code>id</code> column provided by <code>IdTable</code>.
        </p>
        <p>
            Once all columns are defined, the <code>id</code> column is explicitly set as the primary key for the table,
            using the <code>override</code> keyword once again.
        </p>
    </chapter>
    <seealso style="cards">
        <category ref="related">
            <a href="Working-with-Tables.topic"/>
            <a href="Data-Types.topic"/>
        </category>
    </seealso>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Defining tables" id="DSL-Table-Types">
    <show-structure for="chapter,procedure" depth="2"/>
    <include from="Table-Definition.topic" element-id="table" id="table"/>
    <chapter id="IdTable">
        <title>Convenience <code>IdTable</code> class</title>
        <p>
            While <code>Table</code> is the foundational class for defining tables, Exposed also provides the base
            <code>IdTable</code> convenience class. This class extends <code>Table</code> and is designed to simplify
            the definition of tables that use a standard <code>id</code> column as the primary key.
        </p>
        <p>
           For example, to provide an auto-incrementing <code>id</code> column of type <code>Int</code>, you can use
            the <code>IntIdTable</code> subtype:
        </p>
        <code-block lang="kotlin">
            object StarWarsFilms : IntIdTable() {
                val sequelId = integer(&quot;sequel_id&quot;).uniqueIndex()
                val name = varchar(&quot;name&quot;, 50)
                val director = varchar(&quot;director&quot;, 50)
            }
        </code-block>
        <note>
            It is important to note that the <code>id</code> column in this case is of type
            <code>Column&lt;EntityID&lt;Int>></code>. This means that to access the <code>id</code> column value, you
            need to use the <code>.value</code> property:
            <code-block lang="kotlin">
                val idValue = StarWarsFilms.id.value
            </code-block>
        </note>
        <tip>
            <code>EntityID</code> is a wrapper class commonly associated with Exposed's DAO API, but it is also used in
            <code>IdTable</code> classes within the DSL. This wrapper ensures that the <code>id</code> values are
            handled consistently across the DSL and DAO APIs.
            <p>
                For more information on <code>EntityID</code> and how it
                integrates with the DAO API, see <a href="Deep-Dive-into-DAO.md">the DAO documentation</a>.
            </p>
        </tip>
    </chapter>
    <seealso style="cards">
        <category ref="related">
            <a href="Table-Definition.topic"/>
            <a href="Data-Types.topic"/>
        </category>
    </seealso>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Querying data" id="DSL-Querying-data" help-id="Querying-data">
    <show-structure for="chapter,procedure" depth="2"/>
    <chapter id="where-expression">
        <title>Working with <code>where</code> expressions</title>
        <p>The query expression <code>where</code> expects a boolean operator (<code>Op&lt;Boolean&gt;</code>).
            We've split the allowed conditions in different categories:</p>
        <list>
            <li><a anchor="basic">Basic conditions</a>.</li>
            <li><a anchor="logical-conditions">Logical conditions</a>.</li>
            <li><a anchor="check-for-a-match-in-a-pattern">Conditions that check for a match in a pattern</a>.</li>
            <li><a anchor="check-for-a-match-in-a-range">Conditions that check for a match in a range</a>.</li>
            <li><a anchor="check-for-a-match-in-a-collection">Conditions that check for a match in a collection</a>.</li>
        </list>
        <chapter title="Basic conditions" id="basic">
            <deflist type="medium">
                <def id="eq">
                    <title><code>eq</code></title>
                    Checks if an expression is equal to some value.
                </def>
                <def id="neq">
                    <title><code>neq</code></title>
                    Checks if an expression is not equal to some value.
                </def>
                <def id="isNull">
                    <title><code>isNull()</code></title>
                    Returns <code>true</code> if this expression is null, <code>false</code> otherwise.
                </def>
                <def id="isNotNull">
                    <title><code>isNotNull()</code></title>
                    Returns <code>false</code> if this expression is null, <code>true</code> otherwise.
                </def>
                <def id="less">
                    <title><code>less</code></title>
                    Checks if an expression is less than some value.
                </def>
                <def id="lessEq">
                    <title><code>lessEq</code></title>
                    Checks if an expression is less than or equal to some value.
                </def>
                <def id="greater">
                    <title><code>greater</code></title>
                    Checks if an expression is greater than some value.
                </def>
                <def id="greaterEq">
                    <title><code>greaterEq</code></title>
                    Checks if an expression is greater than or equal to some value.
                </def>
                <def id="exists">
                    <title><code>exists</code></title>
                    Checks if a subquery returns at least one row.
                </def>
                <def id="notExists">
                    <title><code>notExists</code></title>
                    Checks if a subquery does not return any row.
                </def>
                <def id="isDistinctFrom">
                    <title><code>isDistinctFrom</code></title>
                    Checks if this expression is not equal to another value, with null treated as a comparable value.
                </def>
                <def id="isNotDistinctFrom">
                    <title><code>isNotDistinctFrom</code></title>
                    Checks if an expression is equal to another value, with null treated as a comparable value.
                </def>
            </deflist>

        </chapter>
        <chapter id="logical-conditions" title="Logical conditions">
            <deflist>
                <def id="not">
                    <title><code>not</code></title>
                    Returns the inverse of an expression.
                </def>
                <def id="and">
                    <title><code>and</code></title>
                    Returns the result of performing a logical <code>and</code> operation between two expressions.
                </def>
                <def id="or">
                    <title><code>or</code></title>
                    Returns the result of performing a logical <code>or</code> operation between two expressions.
                </def>
                <def id="andIfNotNull">
                    <title><code>andIfNotNull</code></title>
                    Returns the result of performing a logical <code>and</code> operation between two expressions if
                    the second one is not null.
                </def>
                <def id="orIfNotNull">
                    <title><code>orIfNotNull</code></title>
                    Returns the result of performing a logical <code>or</code> operation between two expressions if
                    the second is not null.
                </def>
                <def id="compoundAnd">
                    <title><code>compoundAnd()</code></title>
                    Reduces a list to a single expression by performing an <code>and</code> operation between all the
                    expressions in the list.
                </def>
                <def id="compoundOr">
                    <title><code>compoundOr()</code></title>
                    Reduces a list to a single expression by performing an <code>or</code> operation between all the
                    expressions in the list.
                </def>
            </deflist>
        </chapter>
        <chapter title="Check for a match in a pattern" id="check-for-a-match-in-a-pattern">
            <deflist>
                <def id="like">
                    <title><code>like</code></title>
                    Checks if an expression matches the specified pattern.
                    <code-block lang="kotlin">
                        StarWarsFilms.selectAll().where { StarWarsFilms.name like &quot;The %&quot; }
                    </code-block>
                </def>
                <def id="notLike">
                    <title><code>notLike</code></title>
                    Checks if an expression doesn't match the specified pattern.
                </def>
                <def id="regexp">
                    <title><code>regexp</code></title>
                    Checks if an expression matches a regular expression.
                    <code-block lang="kotlin">
                        StarWarsFilms.selectAll().where { StarWarsFilms.name regexp &quot;^The(\\s\\w+){2}\$&quot; }
                    </code-block>
                </def>
                <def id="match">
                    <title><code>match</code></title>
                    Checks whether an expression matches a given pattern based on a specific mode.
                    <p>
                        Supported only on MySQL and MariaDB.
                    </p>
                </def>
            </deflist>
    </chapter>
        <chapter title="Check for a match in a range" id="check-for-a-match-in-a-range">
            <deflist>
                <def id="between">
                    <title><code>between(from: T, to: T)</code></title>
                    Checks if an expression is between the values from and to. Returns <code>true</code> if the
                    expression is between the lower and upper range values (inclusive). Date and time values are also
                    supported as arguments.
                    <code-block lang="kotlin">
                        StarWarsFilms.selectAll().where { StarWarsFilms.sequelId.between(4, 6) }
                    </code-block>
                </def>
            </deflist>
        </chapter>
        <chapter title="Check for a match in a collection" id="check-for-a-match-in-a-collection">
            <deflist>
                <def id="inList">
                    <title><code>inList</code></title>
                    <p>
                        Checks if an expression is equal to any element from list.
                    </p>
                    <code-block lang="kotlin">
                        StarWarsFilms.selectAll().where { StarWarsFilms.sequelId inList listOf(6, 4) }
                    </code-block>
                    <p><code>inList</code> also accepts multiple expressions to check for equality, either as a
                        <code>Pair</code> or a <code>Triple</code>:</p>

                    <code-block lang="kotlin">
                        val topRated = listOf(5 to &quot;Empire Strikes Back&quot;, 4 to &quot;A New Hope&quot;)
                        StarWarsFilms.selectAll().where {
                            StarWarsFilms.sequelId to StarWarsFilms.name inList topRated
                        }
                    </code-block>
                </def>
                <def id="notInList">
                    <title><code>notInList</code></title>
                    Checks if an expression is not equal to any element in the provided collection.
                </def>
            </deflist>

            <p>In addition to the <code>IN</code> operator, the <code>ANY</code> and <code>ALL</code> operators are
                available with any preceding comparison operator:</p>

            <code-block lang="kotlin">
                StarWarsFilms.selectAll().where { StarWarsFilms.sequelId eq anyFrom(arrayOf(6, 4)) }
            </code-block>
            <p><code>anyFrom()</code> and <code>allFrom()</code> also accept subqueries, tables, and array expressions
                as arguments.</p>
        </chapter>
    </chapter>
    <chapter id="conditional-where">
        <title>Conditional <code>where</code></title>
        <p>It is a rather common case to have a query with a <code>where</code> clause that depends on some other code's
            conditions. Moreover, independent or nested conditions could
            make it more complicated to prepare such <code>where</code> clauses.
        </p>
        <p>
            Let's imagine that we have a form on a website where a user can optionally filter "Star Wars"
            films by a director and/or a sequel.
        </p>

        <code-block lang="Kotlin">
            val query = StarWarsFilms.selectAll()
            directorName?.let {
                query.andWhere { StarWarsFilms.director eq it }
            }
            sequelId?.let {
                query.andWhere { StarWarsFilms.sequelId eq it }
            }
        </code-block>
        <p>But what if we want to conditionally select from another table and join it only when a condition is true?
            You have to use <code>adjustColumnSet</code> and <code>adjustSelect</code> functions, which allow to extend
            and modify <code>join</code> and <code>select</code> parts of a query (see kdoc
            on that functions):</p>

        <code-block lang="Kotlin">
            actorName?.let {
                query.adjustColumnSet { innerJoin(Actors, { StarWarsFilms.sequelId }, { Actors.sequelId }) }
                    .adjustSelect { select(fields + Actors.columns).set }
                    .andWhere { Actors.name eq actorName }
            }
        </code-block>
    </chapter>
    <chapter title="Aggregating and sorting data" id="aggregate-and-sort">
        <chapter title="Count" id="count">
            <p><code>count()</code> is a method of <code>Query</code> that is used like in the example below:</p>

            <code-block lang="kotlin">
                val count = StarWarsFilms.selectAll().where { StarWarsFilms.sequelId eq 8 }.count()
            </code-block>
        </chapter>
        <chapter title="Order by" id="order-by">
            <p><code>orderBy()</code> accepts a list of columns mapped to boolean indicates if sorting should be ascending or descending.
                Example:</p>

            <code-block lang="kotlin">
                StarWarsFilms.selectAll().orderBy(StarWarsFilms.sequelId to SortOrder.ASC)
            </code-block>
        </chapter>
        <chapter title="Group by" id="group-by">
            <p>In <code>groupBy</code>, define fields and their functions by the <code>select()</code>
                method.</p>

            <code-block lang="kotlin">
                StarWarsFilms
                    .select(StarWarsFilms.sequelId.count(), StarWarsFilms.director)
                    .groupBy(StarWarsFilms.director)
            </code-block>
            <p>Available field functions are: <code>count</code>, <code>sum</code>, <code>average</code>, <code>min</code>
                and <code>max</code>.</p>
        </chapter>
    </chapter>
    <chapter title="Limiting result sets" id="limit-result-sets">
        <p>You can use the <code>limit</code> function to prevent loading large data sets or use it for pagination with second <code>offset</code>
            parameter.</p>

        <code-block lang="kotlin">
            // Take 2 films after the first one.
            StarWarsFilms.selectAll().where { StarWarsFilms.sequelId eq Actors.sequelId }.limit(2, offset = 1)
        </code-block>
    </chapter>
    <chapter title="Joining tables" id="join-tables">
        <chapter title="Join" id="join">
            <p>For the join examples below, consider the following tables:</p>

            <code-block lang="kotlin">
                object StarWarsFilms : IntIdTable() {
                    val sequelId: Column&lt;Int&gt; = integer(&quot;sequel_id&quot;).uniqueIndex()
                    val name: Column&lt;String&gt; = varchar(&quot;name&quot;, 50)
                    val director: Column&lt;String&gt; = varchar(&quot;director&quot;, 50)
                }
                object Actors : IntIdTable() {
                    val sequelId: Column&lt;Int&gt; = integer(&quot;sequel_id&quot;).uniqueIndex()
                    val name: Column&lt;String&gt; = varchar(&quot;name&quot;, 50)
                }
                object Roles : Table() {
                    val sequelId: Column&lt;Int&gt; = integer(&quot;sequel_id&quot;)
                    val actorId: Column&lt;EntityID&lt;Int&gt;&gt; = reference(&quot;actor_id&quot;, Actors)
                    val characterName: Column&lt;String&gt; = varchar(&quot;name&quot;, 50)
                }
            </code-block>
            <p>Join to count how many actors star in each movie:</p>

            <code-block lang="kotlin">
                Actors.join(StarWarsFilms, JoinType.INNER, onColumn = Actors.sequelId, otherColumn = StarWarsFilms.sequelId)
                    .select(Actors.name.count(), StarWarsFilms.name)
                    .groupBy(StarWarsFilms.name)
            </code-block>
            <p>Instead of specifying <code>onColumn</code> and <code>otherColumn</code>, <code>additionalConstraint</code>
                can be used (and allows specifying
                other types of join conditions).</p>

            <code-block lang="kotlin">
                Actors.join(
                    StarWarsFilms,
                    JoinType.INNER,
                    additionalConstraint = { StarWarsFilms.sequelId eq Actors.sequelId })
                    .select(Actors.name.count(), StarWarsFilms.name)
                    .groupBy(StarWarsFilms.name)
            </code-block>
            <p>When joining on a foreign key, the more concise <code>innerJoin</code> can be used:</p>

            <code-block lang="kotlin">
                (Actors innerJoin Roles)
                    .select(Roles.characterName.count(), Actors.name)
                    .groupBy(Actors.name)
                    .toList()
            </code-block>
            <p>This is equivalent to the following:</p>

            <code-block lang="kotlin">
                Actors.join(Roles, JoinType.INNER, onColumn = Actors.id, otherColumn = Roles.actorId)
                    .select(Roles.characterName.count(), Actors.name)
                    .groupBy(Actors.name)
                    .toList()
            </code-block>
        </chapter>
        <chapter title="Union" id="union">
            <p>You can combine the results of multiple queries using <code>.union(...)</code>.
                Per the SQL specification, the queries must have the same number of columns, and not be marked for update.
                Subqueries may be combined when supported by the database.</p>

            <code-block lang="kotlin">
                val lucasDirectedQuery =
                    StarWarsFilms.select(StarWarsFilms.name).where { StarWarsFilms.director eq &quot;George Lucas&quot; }
                val abramsDirectedQuery =
                    StarWarsFilms.select(StarWarsFilms.name).where { StarWarsFilms.director eq &quot;J.J. Abrams&quot; }
                val filmNames = lucasDirectedQuery.union(abramsDirectedQuery).map { it[StarWarsFilms.name] }
            </code-block>
            <p>Only unique rows are returned by default. Duplicates may be returned using <code>.unionAll()</code>.</p>

            <code-block lang="kotlin">
                val lucasDirectedQuery =
                    StarWarsFilms.select(StarWarsFilms.name).where { StarWarsFilms.director eq &quot;George Lucas&quot; }
                val originalTrilogyQuery =
                    StarWarsFilms.select(StarWarsFilms.name).where { StarWarsFilms.sequelId inList (3..5) }
                val filmNames = lucasDirectedQuery.unionAll(originalTrilogyQuery).map { it[StarWarsFilms.name] }
            </code-block>
        </chapter>
    </chapter>
    <chapter title="Mapping fields with alias" id="alias">
        <p>Aliases allow preventing ambiguity between field names and table names.
            Use the aliased var instead of original one:</p>

        <code-block lang="Kotlin">
            val filmTable1 = StarWarsFilms.alias(&quot;ft1&quot;)
            filmTable1.selectAll() // can be used in joins etc'
        </code-block>
        <p>Also, aliases allow you to use the same table in a join multiple times:</p>

        <code-block lang="Kotlin">
            val sequelTable = StarWarsFilms.alias(&quot;sql&quot;)
            val originalAndSequelNames = StarWarsFilms
                .innerJoin(sequelTable, { StarWarsFilms.sequelId }, { sequelTable[StarWarsFilms.id] })
                .select(StarWarsFilms.name, sequelTable[StarWarsFilms.name])
                .map { it[StarWarsFilms.name] to it[sequelTable[StarWarsFilms.name]] }
        </code-block>
        <p>And they can be used when selecting from sub-queries:</p>

        <code-block lang="kotlin">
            val starWarsFilms = StarWarsFilms
                .select(StarWarsFilms.id, StarWarsFilms.name)
                .alias(&quot;swf&quot;)
            val id = starWarsFilms[StarWarsFilms.id]
            val name = starWarsFilms[StarWarsFilms.name]
            starWarsFilms
                .select(id, name)
                .map { it[id] to it[name] }
        </code-block>
    </chapter>
    <chapter title="Custom Select Queries" id="custom-select-queries">
        <p>A <code>Query</code> instance, which can be instantiated by calling <code>selectAll()</code> or <code>select()</code>
            on a <code>Table</code> or <code>Join</code>, has many extension functions for building complex queries.
            Some of these have already been mentioned above, like <a anchor="where-expression">where()</a>, <a
                 anchor="group-by">groupBy()</a>, and <a anchor="order-by">orderBy()</a>.
        </p>
        <p>If a <code>SELECT</code> query with a special clause is required, a custom extension function can be
            implemented to enable its use with other standard queries.</p>
        <p>For example, MySQL index hints, which follow the table name in SQL, can be implemented on a
            <code>SELECT</code> query by using the following custom function and class:</p>

        <code-block lang="kotlin">
            fun Query.indexHint(hint: String) = IndexHintQuery(this, hint)

            class IndexHintQuery(
                val source: Query,
                val indexHint: String
            ) : Query(source.set, source.where) {

                init {
                    // copies any stored properties from the original query
                    source.copyTo(this)
                }

                override fun prepareSQL(builder: QueryBuilder): String {
                    val originalSql = super.prepareSQL(builder)
                    val fromTableSql = &quot; FROM ${transaction.identity(set.source as Table)} &quot;
                    return originalSql.replace(fromTableSql, &quot;$fromTableSql$indexHint &quot;)
                }

                override fun copy(): IndexHintQuery = IndexHintQuery(source.copy(), indexHint).also { copy -&gt;
                    copyTo(copy)
                }
            }

            transaction {
                val originalQuery = StarWarsFilms
                    .selectAll()
                    .withDistinct()
                    .where { StarWarsFilms.sequelId less 5 }
                    .groupBy(StarWarsFilms.director)

                val queryWithHint = originalQuery
                    .indexHint(&quot;FORCE INDEX (PRIMARY)&quot;)
                    .orderBy(StarWarsFilms.sequelId)
            }
        </code-block>
    </chapter>
</topic>

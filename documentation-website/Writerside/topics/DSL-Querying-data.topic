<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Querying data" id="DSL-Querying-data" help-id="Querying-data">
    <show-structure for="chapter,procedure" depth="2"/>
    <chapter id="where-expression">
        <title>Working with <code>where</code> expressions</title>
        <p>
            The <code>where</code> expression is a core component of building queries in Exposed, allowing you to
            filter data by specifying conditions. A <code>where</code> expression expects a boolean operator
            (<code>Op&lt;Boolean&gt;</code>), which evaluates to either <code>true</code> or <code>false</code>.
        </p>
        <p>Weâ€™ve categorized the available conditions into the following groups:</p>
        <list>
            <li><a anchor="basic">Basic conditions</a></li>
            <li><a anchor="logical-conditions">Logical conditions</a></li>
            <li><a anchor="pattern-matching-conditions">Pattern-matching conditions</a></li>
            <li><a anchor="range-conditions">Range conditions</a></li>
            <li><a anchor="collection-conditions">Collection conditions</a></li>
        </list>
        <chapter title="Basic conditions" id="basic">
            <p>
                Basic conditions are simple comparisons, such as equality (<code>eq</code>) and inequality
                (<code>neq</code>).
            </p>
            <deflist type="medium">
                <def id="eq">
                    <title><code>eq</code></title>
                    Checks if an expression is equal to some value.
                </def>
                <def id="neq">
                    <title><code>neq</code></title>
                    Checks if an expression is not equal to some value.
                </def>
                <def id="isNull">
                    <title><code>isNull()</code></title>
                    Returns <code>true</code> if this expression is null, <code>false</code> otherwise.
                </def>
                <def id="isNotNull">
                    <title><code>isNotNull()</code></title>
                    Returns <code>false</code> if this expression is null, <code>true</code> otherwise.
                </def>
                <def id="less">
                    <title><code>less</code></title>
                    Checks if an expression is less than some value.
                </def>
                <def id="lessEq">
                    <title><code>lessEq</code></title>
                    Checks if an expression is less than or equal to some value.
                </def>
                <def id="greater">
                    <title><code>greater</code></title>
                    Checks if an expression is greater than some value.
                </def>
                <def id="greaterEq">
                    <title><code>greaterEq</code></title>
                    Checks if an expression is greater than or equal to some value.
                </def>
                <def id="exists">
                    <title><code>exists</code></title>
                    Checks if a subquery returns at least one row.
                </def>
                <def id="notExists">
                    <title><code>notExists</code></title>
                    Checks if a subquery does not return any row.
                </def>
                <def id="isDistinctFrom">
                    <title><code>isDistinctFrom</code></title>
                    Checks if this expression is not equal to another value, with null treated as a comparable value.
                </def>
                <def id="isNotDistinctFrom">
                    <title><code>isNotDistinctFrom</code></title>
                    Checks if an expression is equal to another value, with null treated as a comparable value.
                </def>
            </deflist>

        </chapter>
        <chapter id="logical-conditions" title="Logical conditions">
            <p>Logical conditions are those that use logical operators, such as <code>AND</code>, <code>OR</code>,
                and <code>NOT</code>.</p>
            <deflist>
                <def id="and">
                    <title><code>and</code></title>
                    Returns the result of performing a logical <code>and</code> operation between two expressions.
                </def>
                <def id="or">
                    <title><code>or</code></title>
                    Returns the result of performing a logical <code>or</code> operation between two expressions.
                </def>
                <def id="not">
                    <title><code>not</code></title>
                    Returns the inverse of an expression.
                </def>
                <def id="andIfNotNull">
                    <title><code>andIfNotNull</code></title>
                    Returns the result of performing a logical <code>and</code> operation between two expressions if
                    the second one is not null.
                </def>
                <def id="orIfNotNull">
                    <title><code>orIfNotNull</code></title>
                    Returns the result of performing a logical <code>or</code> operation between two expressions if
                    the second is not null.
                </def>
                <def id="compoundAnd">
                    <title><code>compoundAnd()</code></title>
                    Reduces a list to a single expression by performing an <code>and</code> operation between all the
                    expressions in the list.
                </def>
                <def id="compoundOr">
                    <title><code>compoundOr()</code></title>
                    Reduces a list to a single expression by performing an <code>or</code> operation between all the
                    expressions in the list.
                </def>
            </deflist>
        </chapter>
        <chapter title="Pattern-matching conditions" id="pattern-matching-conditions">
            <p>
                Conditions that allow you to check for a match in a pattern using operators, such as <code>LIKE</code>.
            </p>
            <deflist>
                <def id="like">
                    <title><code>like</code></title>
                    Checks if an expression matches the specified pattern.
                    <code-block lang="kotlin"
                                src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                                include-symbol="allMoviesLike"/>
                </def>
                <def id="notLike">
                    <title><code>notLike</code></title>
                    Checks if an expression doesn't match the specified pattern.
                    <code-block lang="kotlin"
                                src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                                include-symbol="allMoviesNotLike"/>
                </def>
                <def id="regexp">
                    <title><code>regexp</code></title>
                    Checks if an expression matches a regular expression.
                    <code-block lang="kotlin"
                                src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                                include-symbol="allMatchingRegex"/>
                </def>
                <def id="match">
                    <title><code>match</code></title>
                    Checks whether an expression matches a given pattern based on a specific mode.
                    <p>
                        Supported only on MySQL and MariaDB.
                    </p>
                </def>
            </deflist>
    </chapter>
        <chapter title="Range conditions" id="range-conditions">
            <p>
                To check if a value lies within a specified range, use the <code>between()</code> function.
            </p>
            <p>
                It checks if an expression is between the values from and to. Returns <code>true</code> if the
                expression is between the lower and upper range values (inclusive). Date and time values are also
                supported as arguments.
            </p>
            <code-block lang="kotlin"
                        src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                        include-symbol="allBetween"/>
        </chapter>
        <chapter title="Collection conditions" id="collection-conditions">
            <p>
                To check if an expression is equal or not to any element from a list, use the <code>inList</code> or
                <code>notInList</code> operators.
            </p>
            <chapter id="collection-condition-lists">
                <title>Using <code>inList</code> with lists</title>
                <p>
                    The <code>inList</code> operator checks if an expression matches any value in a list.
                    In the following example, the query selects all films with <code>sequelId</code> values of 6 or 4.
                </p>
                <code-block lang="kotlin"
                            src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                            include-symbol="allInList"/>
            </chapter>
            <chapter id="collection-condition-pairs-or-triples">
                <title>Using <code>inList</code> with Pairs or Triples</title>
                <p>
                    The <code>inList</code> operator can also handle multiple expressions, such as pairs or triples,
                    to check for equality across multiple columns.
                </p>
                <code-block lang="kotlin"
                            src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                            include-symbol="topRated, multipleInList"/>
            </chapter>
            <chapter id="any-all">
                <title>Using <code>ANY</code> and <code>ALL</code></title>
                <p>In addition to the <code>IN</code> operator, the <code>ANY</code> and <code>ALL</code> operators are
                    available with any preceding comparison operator:</p>
                <code-block lang="kotlin"
                            src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                            include-symbol="anyFromArray"/>
                <p><code>anyFrom()</code> and <code>allFrom()</code> also accept subqueries, tables, and array expressions
                    as arguments.</p>
            </chapter>

        </chapter>
    </chapter>
    <chapter id="conditional-where">
        <title>Conditional <code>WHERE</code></title>
        <p>When working with SQL databases, it is a rather common case to have a query with a <code>WHERE</code> clause
            that depends on certain conditions. These conditions often come from application logic or user input.
            Managing such conditions can become complex, especially with independent or nested conditions.
        </p>
        <p>
            Imagine a form on a website where a user can optionally filter "Star Wars" films by a director and/or a
            sequel. To construct such a query, you can use the <code>andWhere</code> function:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                    include-symbol="findWithConditionalWhere"/>
        <p>
            In the above example, the query starts with <code>selectAll()</code>, which retrieves all rows from the
            <code>StarWarsFilmsTable</code>. Then, the <code>let</code> function is used to ensure that conditional
            <code>WHERE</code> clauses for the <code>directorName</code> and <code>sequelId</code> are applied only if
            values are provided.
        </p>
        <chapter title="Conditional joins" id="conditional-joins">
            <p>
                Sometimes, you may need to modify not just the <code>WHERE</code> clause but also the underlying table
                joins based on certain conditions. For example, filtering by an actor's name might require joining
                <code>ActorsTable</code> conditionally.
            </p>
            <p>
                In these cases, you can use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-query/adjust-column-set.html">
                    <code>adjustColumnSet</code>
                </a>
                and
                <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-query/adjust-select.html">
                    <code>adjustSelect</code>
                </a> functions,
                which allow to extend and modify <code>JOIN</code> and <code>SELECT</code> parts of a query:
            </p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                    include-symbol="findWithConditionalJoin"/>
        </chapter>
    </chapter>
    <chapter title="Aggregating and sorting data" id="aggregate-and-sort">
        <chapter title="Count" id="count">
            <p>
                The <code>count()</code> method is used to determine the number of rows matching a query.
                It is called on a <code>Query</code> object and returns the total count of rows.
            </p>
            <p>
                The following example counts all rows where <code>sequelId</code> equals <code>8</code>:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                        include-symbol="count"/>
        </chapter>
        <chapter title="Order by" id="order-by">
            <p>
                The <code>orderBy()</code> function allows you to sort query results by specifying a list of
                columns and their sort order (ascending or descending).
            </p>
            <p>
                In the following example, <code>StarWarsFilmsTable.sequelId </code> specifies the column to sort by and
                <code>SortOrder.ASC</code> sets the sort order to be ascending:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                        include-symbol="sortedFilms"/>
        </chapter>
        <chapter title="Group by" id="group-by">
            <p>In <code>groupBy</code>, define fields and their functions by the <code>select()</code>
                method.</p>
            <code-block lang="kotlin"
                        src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                        include-symbol="groupedFilms"/>
            <p>Available field functions are: <code>count</code>, <code>sum</code>, <code>average</code>, <code>min</code>
                and <code>max</code>.</p>
        </chapter>
    </chapter>
    <chapter title="Limiting result sets" id="limit-result-sets">
        <p>You can use the <code>limit</code> function to prevent loading large data sets or to accomplish pagination by using the <code>offset</code>
            function.
        </p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/QueryingExamples.kt"
                    include-symbol="limitedFilms"/>
    </chapter>
    <chapter title="Mapping fields with alias" id="alias">
        <p>Aliases allow preventing ambiguity between field names and table names.
            Use the aliased var instead of original one:</p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/AliasExamples.kt"
                    include-symbol="filmTable1, allFilms"/>
        <p>Also, aliases allow you to use the same table in a join multiple times:</p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/AliasExamples.kt"
                    include-symbol="sequelTable, originalAndSequelNames"/>
        <p>And they can be used when selecting from sub-queries:</p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/AliasExamples.kt"
                    include-symbol="starWarsFilms, id, name, allStarWarsFilms"/>
    </chapter>
    <chapter title="Custom Select Queries" id="custom-select-queries">
        <p>A <code>Query</code> instance, which can be instantiated by calling <code>selectAll()</code> or <code>select()</code>
            on a <code>Table</code> or <code>Join</code>, has many extension functions for building complex queries.
            Some of these have already been mentioned above, like <a anchor="where-expression">where()</a>, <a
                 anchor="group-by">groupBy()</a>, and <a anchor="order-by">orderBy()</a>.
        </p>
        <p>If a <code>SELECT</code> query with a special clause is required, a custom extension function can be
            implemented to enable its use with other standard queries.</p>
        <p>For example, MySQL index hints, which follow the table name in SQL, can be implemented on a
            <code>SELECT</code> query by using the following custom function and class:</p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/CustomSelectExamples.kt"
                    include-lines="4-6,9,18-39"/>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/CustomSelectExamples.kt"
                    include-lines="43-48,56-58"/>
    </chapter>
</topic>

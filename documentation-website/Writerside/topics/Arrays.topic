<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Arrays" id="Arrays">
    <p>PostgreSQL and H2 databases support the explicit array data type,
        with multidimensional arrays being supported by PostgreSQL.</p>

    <p>Exposed allows defining columns as arrays, with the stored contents being any out-of-the-box or custom data type.
        If the contents are of a type with a supported <code>ColumnType</code> in the <code>exposed-core</code> module,
        the column can be simply defined with that type:</p>

    <code-block lang="kotlin">
        object Teams : Table(&quot;teams&quot;) {
            // Single-dimensional arrays
            val memberIds = array&lt;UUID&gt;(&quot;member_ids&quot;)
            val memberNames = array&lt;String&gt;(&quot;member_names&quot;)
            val budgets = array&lt;Double&gt;(&quot;budgets&quot;)

            // Multi-dimensional arrays
            val nestedMemberIds = array&lt;UUID, List&lt;List&lt;UUID&gt;&gt;&gt;(
                &quot;nested_member_ids&quot;, dimensions = 2
            )
            val hierarchicalMemberNames = array&lt;String, List&lt;List&lt;List&lt;String&gt;&gt;&gt;&gt;(
                &quot;hierarchical_member_names&quot;, dimensions = 3
            )
        }
    </code-block>

    <p>If more control is needed over the base content type, or if the latter is user-defined or from a non-core
        module, the explicit type should be provided to the function:</p>

    <code-block lang="kotlin">
        object Teams : Table(&quot;teams&quot;) {
            // Single-dimensional arrays
            val memberNames = array&lt;String&gt;(&quot;member_names&quot;, VarCharColumnType(colLength = 32))
            val deadlines = array&lt;LocalDate&gt;(&quot;deadlines&quot;, KotlinLocalDateColumnType()).nullable()
            val expenses = array&lt;Double?&gt;(&quot;expenses&quot;, DoubleColumnType()).default(emptyList())

            // Multi-dimensional arrays
            val nestedMemberIds = array&lt;UUID, List&lt;List&lt;UUID&gt;&gt;&gt;(
                &quot;nested_member_ids&quot;, dimensions = 2
            )
            val hierarchicalMemberNames = array&lt;String, List&lt;List&lt;List&lt;String&gt;&gt;&gt;&gt;(
                &quot;hierarchical_member_names&quot;,
                VarCharColumnType(colLength = 32),
                dimensions = 3
            )
        }
    </code-block>

    <p>This will prevent an exception being thrown if Exposed cannot find an associated column mapping for the
        defined type.
        Null array contents are allowed, and the explicit column type should be provided for these columns as
        well.</p>
    <p>An array column accepts inserts and retrieves stored array contents as a Kotlin <code>List</code>:</p>

    <code-block lang="kotlin">
        Teams.insert {
            // Single-dimensional arrays
            it[memberIds] = List(5) { UUID.randomUUID() }
            it[memberNames] = List(5) { i -&gt; &quot;Member ${'A' + i}&quot; }
            it[budgets] = listOf(9999.0)

            // Multi-dimensional arrays
            it[nestedMemberIds] = List(5) { List(5) { UUID.randomUUID() } }
            it[hierarchicalMemberNames] = List(3) { List(3) { List(3) {
                    i -> "Member ${'A' + i}"
            } } }
        }
    </code-block>
    <chapter title="Array functions" id="array-functions">
        <p>A single element in a stored array can be accessed using the index reference <code>get()</code> operator:
        </p>

        <code-block lang="kotlin">
            val firstMember = Teams.memberIds[1]
            Teams
                .select(firstMember)
                .where { Teams.expenses[1] greater Teams.budgets[1] }
        </code-block>

        <p>This also applies to multidimensional arrays:</p>
        <code-block lang="kotlin">
            Teams
                .selectAll()
                .where { Teams.hierarchicalMemberNames[1][1] eq "Mr. Smith" }
        </code-block>

        <note>
            Both PostgreSQL and H2 use a one-based indexing convention, so the first element is retrieved by using
            index 1.
        </note>
        <p>
            A new subarray can also be accessed by using
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/slice.html">
                <code>.slice()</code>
            </a>
            , which takes a lower and upper bound
            (inclusive):
        </p>

        <code-block lang="kotlin">
            Teams.select(Teams.deadlines.slice(1, 3))
        </code-block>

        <p>In the case of multidimensional arrays, the <code>.slice()</code> calls can be nested:</p>
        <code-block lang="kotlin">
            Teams.select(Teams.hierarchicalMemberNames.slice(1, 2).slice(3, 4))
        </code-block>
        <p>Both arguments for these bounds are optional if using PostgreSQL.</p>
        <p>
            An array column can also be used as an argument for the <code>ANY</code> and <code>ALL</code> SQL
            operators, either by providing the entire column or a new array expression via <code>.slice()</code>:
        </p>

        <code-block lang="kotlin">
            Teams
                .selectAll()
                .where { Teams.budgets[1] lessEq allFrom(Teams.expenses) }

            Teams
                .selectAll()
                .where { stringParam(&quot;Member A&quot;) eq anyFrom(Teams.memberNames.slice(1, 4)) }
        </code-block>
    </chapter>
</topic>

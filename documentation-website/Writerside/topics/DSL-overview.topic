<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="DSL Overview" id="DSL-overview">

    <p>The DSL (Domain-Specific Language) API of Exposed is similar to actual SQL statements, but with the type safety
        that Kotlin offers. This core DSL is translated into any database-specific SQL syntax depending on the underlying connection.
    </p>
    <chapter title="Defining and creating tables" id="dsl-tables">
        <p>A database table is represented by an <code>object</code> inherited from
            <path>org.jetbrains.exposed.sql.Table</path>. You can define a table in the following way:</p>

        <code-block lang="kotlin">
            object StarWarsFilms : Table() {
                val id: Column&lt;Int&gt; = integer(&quot;id&quot;).autoIncrement()
                val sequelId: Column&lt;Int&gt; = integer(&quot;sequel_id&quot;).uniqueIndex()
                val name: Column&lt;String&gt; = varchar(&quot;name&quot;, 50)
                val director: Column&lt;String&gt; = varchar(&quot;director&quot;, 50)
                override val primaryKey =
                    PrimaryKey(id, name = &quot;PK_StarWarsFilms_Id&quot;) // PK_StarWarsFilms_Id is optional here
            }
        </code-block>
        <p>To declare a table that contains an id with the name <code>id</code> of type <code>Int</code>, use <code>IntIdTable()</code>:</p>

        <code-block lang="kotlin">
            object StarWarsFilms : IntIdTable() {
                val sequelId: Column&lt;Int&gt; = integer(&quot;sequel_id&quot;).uniqueIndex()
                val name: Column&lt;String&gt; = varchar(&quot;name&quot;, 50)
                val director: Column&lt;String&gt; = varchar(&quot;director&quot;, 50)
            }
        </code-block>
        <p>
            To create and populate a table within a database, you need to open a <a href="Transactions.md">transaction</a>
            and use the <code>create()</code> method from <code>SchemaUtils</code>.
        </p>
        <code-block lang="kotlin">
            transaction {
                SchemaUtils.create(StarWarsFilms)
                //...
            }
        </code-block>
    </chapter>

</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Joining tables" id="DSL-Joining-tables" help-id="Joining-tables">

    <show-structure for="chapter,procedure" depth="2"/>
    <chapter title="Join" id="join">
        <p>For the join examples below, consider the following tables:</p>
        <tabs>
            <tab id="StarWarsFilmsIntIdTable" title="StarWarsFilmsIntIdTable">
                <code-block lang="kotlin"
                            src="exposed-dsl/src/main/kotlin/org/example/tables/StarWarsFilmsIntIdTable.kt"/>
            </tab>
            <tab id="ActorsIntIdTable" title="ActorsIntIdTable">
                <code-block lang="kotlin"
                            src="exposed-dsl/src/main/kotlin/org/example/tables/ActorsIntIdTable.kt"/>
            </tab>
            <tab id="RolesTable" title="RolesTable">
                <code-block lang="kotlin"
                            src="exposed-dsl/src/main/kotlin/org/example/tables/RolesTable.kt"/>
            </tab>
        </tabs>
        <p>
            In the following example, the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.v1.sql/-column-set/join.html">
                <code>.join()</code>
            </a>
            function is used to count how many actors star in each movie:
        </p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/JoinExamples.kt"
                    include-lines="18-25"/>
        <p>
            Instead of specifying <code>onColumn</code> and <code>otherColumn</code>, <code>additionalConstraint</code>
            can be used, which allows specifying additional types of join conditions.
        </p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/JoinExamples.kt"
                    include-lines="29-35"/>
        <chapter title="Join on a foreign key" id="inner-join">
            <p>
                When joining on a foreign key, the more concise
                <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.v1.sql/-column-set/inner-join.html">
                    <code>innerJoin</code>
                </a>
                can be used:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dsl/src/main/kotlin/org/example/examples/JoinExamples.kt"
                        include-lines="39-42"/>
            <p>
                This is equivalent to using a <code>.join()</code> with a <code>JoinType.INNER</code>:
            </p>
            <code-block lang="kotlin"
                        src="exposed-dsl/src/main/kotlin/org/example/examples/JoinExamples.kt"
                        include-lines="46-49"/>
        </chapter>
    </chapter>
    <chapter title="Union" id="union">
        <p>
            To combine the results of multiple queries, use the
            <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.v1.sql/union.html">
                <code>.union()</code>
            </a>
            function. Per the SQL specification, the queries must have the same number of columns, and not be marked for update.
            Subqueries may be combined when supported by the database.
        </p>
        <code-block lang="kotlin"
                    src="exposed-dsl/src/main/kotlin/org/example/examples/JoinExamples.kt"
                    include-symbol="lucasDirectedQuery,abramsDirectedQuery,filmNames"/>
        <chapter title="Include duplicates" id="union-all">
            <p>
                By default, <code>.union()</code> returns only unique rows. To include duplicates in the results, use the
                <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.v1.sql/union-all.html">
                    <code>.unionAll()</code>
                </a>
                function instead.
            </p>
            <code-block lang="kotlin"
                        src="exposed-dsl/src/main/kotlin/org/example/examples/JoinExamples.kt"
                        include-symbol="lucasDirectedQuery,originalTrilogyQuery,allFilmNames"/>
        </chapter>
    </chapter>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Binary" id="Binary-types">
    <show-structure for="chapter" depth="2" />
    <tldr>
        <p>
            <b>Required dependencies</b>: <code>org.jetbrains.exposed:exposed-core</code>
        </p>
    </tldr>

    <p>
        Exposed provides support for storing and handling binary data through the <code>ExposedBlob</code> type, 
        which efficiently wraps binary content using <code>InputStream</code>. This approach ensures optimal memory usage 
        when working with large binary objects.
    </p>
    <chapter title="Supported types" id="supported-types">
        <p>
            The <code>exposed-core</code> module provides the following binary types:
        </p>
        <deflist type="medium">
            <def id="blob-type">
                <title>
                    <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-table/blob.html">
                        <code>blob</code>
                    </a>
                </title>
                <p>Maps to database <code>BLOB</code> (or equivalent type depending on the database). Used for storing binary objects of any size.</p>
                <p>Database-specific mappings:</p>
                <list type="bullet">
                    <li>PostgreSQL: Maps to <code>bytea</code></li>
                    <li>SQLServer: Maps to <code>VARBINARY(MAX)</code></li>
                    <li>Other databases: Maps to <code>BLOB</code></li>
                </list>
            </def>

            <def id="binary-type">
                <title>
                    <a href="https://jetbrains.github.io/Exposed/api/exposed-core/org.jetbrains.exposed.sql/-table/binary.html">
                        <code>binary</code>
                    </a>
                </title>
                <p>Maps to database <code>VARBINARY</code> with specified length. Used for storing fixed-size binary data.</p>
                <code-block lang="kotlin"
                            src="exposed-data-types/src/main/kotlin/org/example/examples/BinaryExamples.kt"
                            include-symbol="thumbnail"
                />
                <note>
                    <p>Ensure that the binary data doesn't exceed the specified length, or it will be truncated.</p>
                </note>
            </def>
        </deflist>
    </chapter>
    <chapter title="Basic usage" id="basic-usage">
        <p>Here's a simple example of using binary types in a table definition:</p>
        <code-block lang="kotlin"
                    src="exposed-data-types/src/main/kotlin/org/example/examples/BinaryExamples.kt"
                    include-lines="3-4,12-20"
        />
        <p>To store and retrieve binary data:</p>
        <code-block lang="kotlin"
                    src="exposed-data-types/src/main/kotlin/org/example/examples/BinaryExamples.kt"
                    include-lines="26-40"
        />
    </chapter>

    <chapter title="Advanced features" id="advanced-features">
        <chapter title="Default values">
            <p>You can specify default values for BLOB columns:</p>
            <code-block lang="kotlin">
            val content = blob("content").default(ExposedBlob("default content".toByteArray()))
            </code-block>
            <warning>
                <p>MySQL (versions 5 and 8) does not support default values for BLOB columns.</p>
            </warning>
        </chapter>

        <chapter title="PostgreSQL Object Identifiers">
            <p>PostgreSQL supports storing large objects using Object Identifiers (OIDs):</p>
            <code-block lang="kotlin">
            val content = blob("content", useObjectIdentifier = true)
            </code-block>
            <note>
                <p>This feature is specific to PostgreSQL and will throw <code>IllegalStateException</code> if used with other databases.</p>
            </note>
        </chapter>

        <chapter title="Parameter binding">
            <p>For more efficient handling of binary data in queries:</p>
            <code-block lang="kotlin"
                        src="exposed-data-types/src/main/kotlin/org/example/examples/BinaryExamples.kt"
                        include-lines="48-52"
            />
        </chapter>
    </chapter>
</topic>

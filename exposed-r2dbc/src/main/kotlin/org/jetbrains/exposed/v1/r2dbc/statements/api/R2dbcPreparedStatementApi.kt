package org.jetbrains.exposed.v1.r2dbc.statements.api

import org.jetbrains.exposed.v1.core.statements.StatementResult
import org.jetbrains.exposed.v1.core.statements.api.PreparedStatementApi

/**
 * Base class representing a precompiled SQL [io.r2dbc.spi.Statement] from the R2DBC SPI.
 */
interface R2dbcPreparedStatementApi : PreparedStatementApi {
    /** Set the number of result set rows that should be fetched when generated by an executed statement. */
    suspend fun setFetchSize(value: Int?)

    /** Set the number of seconds the R2DBC driver will wait for a statement to execute. */
    suspend fun setTimeout(value: Int?)

    /** Adds parameters to the statement's batch of SQL commands. */
    suspend fun addBatch()

    /**
     * Executes an SQL query stored in an [io.r2dbc.spi.Statement].
     *
     * @return The [R2dbcResult] generated by the query.
     */
    suspend fun executeQuery(): R2dbcResult

    /**
     * Executes an SQL statement stored in an [io.r2dbc.spi.Statement].
     *
     * @return The affected row count if the executed statement is a DML type;
     * otherwise, 0 if the statement returns nothing.
     */
    suspend fun executeUpdate(): Int

    /**
     * Executes multiple SQL statements stored in a single [io.r2dbc.spi.Statement].
     *
     * @return A list of [StatementResult]s retrieved from the database, which may store either affected row counts
     * or wrapped results. The order of elements is based on the order of the statements in the `PreparedStatement`.
     */
    suspend fun executeMultiple(): List<StatementResult>

    /** The [R2dbcResult] generated by the executed statement, or `null` if none was retrieved. */
    suspend fun getResultRow(): R2dbcResult?

    /** Closes the statement, if still open, and releases any of its database and/or driver resources. */
    suspend fun closeIfPossible()

    /**
     * Executes batched SQL statements stored as an [io.r2dbc.spi.Statement].
     *
     * @return A list of the affected row counts, with one element for each statement,
     * ordered based on the order in which statements were provided to the batch.
     */
    suspend fun executeBatch(): List<Int>

    /** Cancels the statement, if supported by the database. */
    suspend fun cancel()
}

package org.jetbrains.exposed.sql.statements.r2dbc

import io.r2dbc.spi.Result
import io.r2dbc.spi.Row
import io.r2dbc.spi.RowMetadata
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.reactive.collect
import org.jetbrains.exposed.sql.statements.api.ResultApi

/** Class for wrapping an [io.r2dbc.spi.Row] generated by executing a statement that queries an R2DBC database. */
class R2dbcResult(
    /** The actual [Result] returned by the database after statement execution. */
    override val result: Result
) : ResultApi {
    private var currentRow: Row? = null
    private var currentRowMetadata: RowMetadata? = null

    override fun toString(): String = "R2dbcResult(result = $result)"

    override fun getObject(index: Int): Any? = currentRow?.get(index)

    override fun <T> getObject(index: Int, type: Class<T>): T? = currentRow?.get(index, type)

    override fun metadataColumnCount(): Int = currentRowMetadata?.columnMetadatas?.size ?: 0

    override fun metadataColumnName(index: Int): String = currentRowMetadata?.getColumnMetadata(index)?.name ?: ""

    override fun metadataColumnIndex(label: String): Int {
        TODO("Not yet implemented")
    }

    override fun next(): Boolean = currentRow != null

    override fun <T> collectAll(transform: (ResultApi) -> T): Flow<T> = flow {
        result.map { row, rowMetadata ->
            currentRow = row
            currentRowMetadata = rowMetadata
            transform(this@R2dbcResult)
        }.collect {
            emit(it)
        }.also {
            currentRow = null
            currentRowMetadata = null
        }
    }

    override fun <T> collectSingle(transform: (ResultApi) -> T): Flow<T> = flow {
        result.map { row, rowMetadata ->
            currentRow = row
            currentRowMetadata = rowMetadata
            transform(this@R2dbcResult)
        }.collect {
            emit(it)
        }
    }

    override fun close() {
        // do nothing
    }

    override fun releaseResult() {
        // do nothing
    }
}

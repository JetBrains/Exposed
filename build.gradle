import java.time.Duration

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url "https://dl.bintray.com/kotlin/kotlin"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.5.2"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.0"
    id 'net.researchgate.release' version '2.7.0'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: "maven-publish"
apply plugin: 'docker-compose'

sourceCompatibility = 1.6
targetCompatibility = 1.6

defaultTasks 'jar'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task exposedDialectTestWithDocker(type: Test) {
    systemProperties['exposed.test.dialects'] = dialect
}

exposedDialectTestWithDocker.doFirst {
    def containerInfo = dockerCompose.servicesInfos[dialect]
    systemProperty 'exposed.test.' + dialect + '.host', containerInfo.host
    systemProperty 'exposed.test.oracle.port', containerInfo.ports[1521]
    systemProperty 'exposed.test.sqlserver.port', containerInfo.ports[1433]
    systemProperty 'exposed.test.mariadb.port', containerInfo.ports[3306]
}

dockerCompose.isRequiredBy(exposedDialectTestWithDocker)

dockerCompose {
    useComposeFiles = ['docker-compose-' + dialect + '.yml']
    captureContainersOutput = true
    removeVolumes = true
    environment.put 'COMPOSE_CONVERT_WINDOWS_PATHS', 'true'
    waitForHealthyStateTimeout = Duration.ofMinutes(60)
}

artifacts {
    archives sourcesJar
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url "https://dl.bintray.com/kotlin/kotlin"
    }

    maven {
        url "https://packages.atlassian.com/maven-3rdparty-legacy/"
    }
}

dependencies {
    testCompile "mysql:mysql-connector-java:5.1.46"
    testCompile "mysql:mysql-connector-mxj:5.0.12"
    testCompile "org.mariadb.jdbc:mariadb-java-client:2.3.0"
    testCompile 'org.postgresql:postgresql:42.2.2.jre6'
    testCompile 'com.opentable.components:otj-pg-embedded:0.12.0'
    testCompile 'org.xerial:sqlite-jdbc:3.23.1'
    testCompile 'com.oracle:ojdbc6:12.1.0.1-atlassian-hosted'
    testCompile 'com.microsoft.sqlserver:mssql-jdbc:6.4.0.jre7'
}

test {
    jvmArgs "-XX:MaxPermSize=256m"
    if (System.properties['exposed.test.dialects'] != null) {
        systemProperties['exposed.test.dialects'] = System.properties['exposed.test.dialects']
    }
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

publishing {
    publications {
        exposed(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifactId = 'exposed'
        }
        spring_transaction(MavenPublication) {
            def springModule = findProject(":spring-transaction")
            from springModule.components.java
            artifact springModule.sourcesJar
            artifactId = 'spring-transaction'
        }
    }
}


bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['exposed', 'spring_transaction']
    pkg {
        userOrg = 'kotlin'
        repo = 'exposed'
        name = 'exposed'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/JetBrains/Exposed.git'
    }
}

afterReleaseBuild.dependsOn bintrayUpload

task wrapper(type: Wrapper) {
    gradleVersion = "4.10.2"
    distributionType = Wrapper.DistributionType.ALL
}


allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'

    group = 'org.jetbrains.exposed'

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
        compile 'joda-time:joda-time:2.9.9'
        compile 'org.slf4j:slf4j-api:1.7.25'
        compileOnly 'com.h2database:h2:1.4.197'

        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile 'org.slf4j:slf4j-log4j12:1.7.25'
        testCompile 'log4j:log4j:1.2.17'
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'com.h2database:h2:1.4.197'
    }
}


project(":spring-transaction") {
    apply plugin: 'kotlin'

    dependencies {
        compile "org.springframework:spring-jdbc:$spring_version"
        compile "org.springframework:spring-context:$spring_version"
        compile rootProject
        testCompile "org.springframework:spring-test:$spring_version"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}
/*
kotlin {
    experimental {
        coroutines "enable"
    }
}
*/

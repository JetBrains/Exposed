package org.jetbrains.exposed.v1.core.statements.api

import kotlinx.coroutines.flow.Flow
import org.jetbrains.exposed.v1.core.ColumnType

/**
 * Base class for wrapping data generated by executing a statement that queries the database.
 */
interface ResultApi : AutoCloseable {
    /**
     * Returns a [Flow] containing the results of applying the given transform function [block] to each original row
     * of data generated by executing a statement.
     */
    fun <T> mapRows(block: (row: RowApi) -> T?): Flow<T?>
}

/**
 * Base representation for accessing data rows by column index or name.
 *
 * Provides methods to retrieve objects from a row using a one-based column index or a column name,
 * with optional type conversion for strongly-typed results.
 */
interface RowApi {
    /**
     * Retrieves an object from the current data row at the specified [index] position.
     *
     * @param index The first column is at position one, the second at position two, and onwards.
     * @return The object at the specified index
     */
    fun getObject(index: Int): Any?

    /**
     * Retrieves an object from the current data row with the specified column [name].
     *
     * @param name The column name
     * @return The object in the specified column
     */
    fun getObject(name: String): Any?

    /**
     * Retrieves an object from the current data row at the specified [index] position, and converts the stored SQL type
     * to the requested [type], if the conversion is supported.
     *
     * @param T The target type for conversion
     * @param index The first column is at position one, the second at position two, and onwards.
     * @param type The class representing the target type
     * @return The object converted to the specified type
     */
    fun <T> getObject(index: Int, type: Class<T>): T?

    /**
     * Retrieves an object from the current data row with the specified column [name], and converts the stored SQL type
     * to the requested [type], if the conversion is supported.
     *
     * @param T The target type for conversion
     * @param name The column name
     * @param type The class representing the target type
     * @return The object converted to the specified type
     */
    fun <T> getObject(name: String, type: Class<T>): T?

    /**
     * Retrieves an object from the current data row at the specified [index] position, and converts the stored SQL type
     * to the requested [type], if the conversion is supported, using an additional column type hint.
     *
     * This method provides additional type information through the [columnType] parameter, which can be used
     * for more precise type conversion.
     *
     * @param T The target type for conversion
     * @param index The first column is at position one, the second at position two, and onwards.
     * @param type The class representing the target type
     * @param columnType Additional type information for the column (currently unused in default implementation)
     * @return The object converted to the specified type
     */
    fun <T> getObject(index: Int, type: Class<T>, columnType: ColumnType<*>): T? = getObject(index, type)

    /**
     * Retrieves an object from the current data row with the specified column [name], and converts the stored SQL type
     * to the requested [type], if the conversion is supported, using an additional column type hint.
     *
     * This method provides additional type information through the [columnType] parameter, which can be used
     * for more precise type conversion.
     *
     * @param T The target type for conversion
     * @param name The column name
     * @param type The class representing the target type
     * @param columnType Additional type information for the column (currently unused in default implementation)
     * @return The object converted to the specified type
     */
    fun <T> getObject(name: String, type: Class<T>, columnType: ColumnType<*>): T? = getObject(name, type)
}
